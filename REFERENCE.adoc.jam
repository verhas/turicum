= Turicum Programming Language Reference

{%@snip:collect from=core/src/main/java%}
{%@snip:collect from=core/src/test/resources/references.turi%}
{%@snip:collect from=core/src/test/resources/references_output%}

{%@define sample($X)=
.source of snippet `$X`
[source]
----
{%#trimLines
{%@snip $X%}
%}
----
{%#define [global] output()=
.output of snippet `$X`
[source]
----
{%@include [verbatim] core/src/test/resources/references_output/$X.txt%}
----
%}
{%#define [global] result()=
.result of snippet `$X`
[source]
----
{%@include [verbatim] core/src/test/resources/references_output/$X_result.txt%}
----
%}
%}
{%@define S($X)={%sample $X%}
{%output%}
%}

== Introduction

=== What is Turicum?

Turicum is a modern programming language designed for expressiveness, safety, and concurrency.
It combines functional and object-oriented paradigms with a clean and coherent syntax.
Its preprocessing capabilities and dynamic nature make it a uniquely powerful tool for programming.

=== Turicum Is

* **Functional**
+
Functions, closures, and macros are first-class citizens in Turicum.
Any of these can be used as values.
Every command evaluates to a value, so any command can appear within an expression, and every expression is also a command.

* **Object-Oriented**
+
Programs can define classes, methods, multiple inheritance,
and objects that inherit properties from their class.

* **Dynamic**
+
All definitions occur at runtime and can be modified at runtime.
For example, a class or function is created when its definition is executed, and it exists within the defining scope.
Methods are just fields containing closures or function values, and they can be added to any class or object—even after creation.

* **Flexible**
+
The interpreter can evaluate loaded code at any time, passing the remaining lexical tokens to a preprocessor.
This preprocessor—written in Turicum as a function or closure—can transform the token stream, enabling arbitrary syntactic extensions to the language.

* **Multithreaded**
+
The interpreter is built on Java 21 and supports for Virtual Threads, using native language constructs.

* **Typed and Scoped**
+
Variables can be optionally typed, and assignments are dynamically type-checked at runtime.

Turicum functions both as a scripting language and as an embeddable engine.
It can run as a standalone command-line tool or be integrated into Java or Kotlin applications as a library.

Turicum is implemented in Java and is designed to be approachable for JVM developers while introducing powerful new abstractions.

The name “Turicum” is the ancient Roman name for the city of Zürich, Switzerland, where the language is being developed.

=== Design Goals and Philosophy

Turicum was designed with the following principles:

* A **concise syntax** that remains readable and expressive.
* A **functional-first** execution model with support for **side effects** when necessary.
* **Multithreading and pipeline constructs** built directly into the language.
* **Safe scoping and closures**, including *reclosable* closures, which can adapt to new context bindings.
Closure reclosing is a unique feature of the language.
* **Macro-based metaprogramming**, allowing deferred and explicit evaluation of arguments.
* A flexible **parameter system**, supporting:
- `normal` parameters,
- positional-only,
- named-only,
- rest parameters (`[x]`),
- meta parameters (`{x}`),
- and trailing callable parameters (`^x`).

The language is intended for **experienced developers**, especially those working with the JVM, who require a powerful scripting or DSL tool that feels natural but scales to complex architectural needs.

=== Lexical and Syntax Conventions

Turicum syntax is clean, indentation-insensitive, and largely expression-oriented.
It does not aim to reinvent syntax, so it will feel familiar to programmers coming from Java, C, and—occasionally—Python.
At the same time, it avoids syntactically superfluous elements, such as mandatory parentheses `()` around `if` conditions.

The core syntactic conventions are as follows:

* Semicolons (`;`) may be used to separate commands but are generally optional.
* Code blocks are enclosed in curly braces `{}` and evaluate to the result of the last executed command.
* Single-line comments begin with `//` and continue to the end of the line.
* Multiline comments start with `+/*+` and end with `*/`, like in Java, C, Go etc.
Unlike Java, nested multiline comments are supported.
* Identifiers follow conventional naming rules and are case-sensitive.
* Any string enclosed between backticks (`pass:[`]`) is treated as an identifier (similar to Kotlin).
* All keywords are lowercase.
* Strings enclosed in double quotes (`"`) must terminate on the same line.
Multiline strings are enclosed in triple double quotes (`"""`).


More details about expressions, control flow, and declarations can be found in the chapters that follow.

== Basic Concepts

A Turicum program is a list of commands, executed from start to end.

{%S first_sample%}

A command is usually terminated by a newline or a semicolon (`;`).
A semicolon can always be replaced by a newline at the end of a command—except when the syntax explicitly requires the semicolon inside the command, such as in a `for` loop.

Commands can be grouped into blocks, enclosed in `{` and `}`.
Everything in Turicum has a value—even commands.
For example, an `if` statement returns the value of the executed command:

* the branch after the `if` condition,
* the `else` block if the condition is false and an `else` is present, or
* `none` if there is no `else` block.

{%S if_value%}

Command blocks can appear within expressions.
The value of a command block is the result of the last executed expression.

{%S block_value%}

Expressions may contain:

* Literals:
** strings
** numbers
** JSON values
* Variables
* Operators
* Function calls
* Closure calls
* Macro calls
* Method calls
* Async expressions
* Code blocks

Symbolic constants are {%#trimLines
{%#replaceLines replace=/"(.*?)",[^"]+/`$1`,/ replace=/,$//
{%@snip builtins%}%}%}pinned (immutable, final) global variables.

==== Shebang

The interpreter ignores the first line of the program if it begins with `#!`.

==== Whitespace and Line Breaks

Whitespace—including spaces, tabs, and line breaks—is generally insignificant, except where indentation aids readability.
Multiple blank lines are allowed between tokens and commands.
Line breaks alone do not terminate a command.

==== Identifiers

Identifiers are names used for variables, functions, classes, and other user-defined symbols.

* Identifiers must begin with a Unicode letter or an underscore (`_`), and may contain letters, digits, and underscores.
* You can explicitly define an identifier using backticks: `+`non-standard-id`+`.
This allows you to use any string as an identifier—even reserved words, symbols, or operators.
The primary use of this feature is to override operators, such as `+`==`+`.
* Identifiers are case-sensitive.

Some Unicode characters like `∞` (infinity) and `∅` (none) are automatically translated into meaningful identifiers (`inf`, `none`).

[NOTE]
====
Many languages allow operator overloading through specially named methods.
For example, in Python, you can override the `+` operator by defining a method named `pass:[__plus__]`.
Turicum does not require such special naming conventions.
You can simply define a method with the name `pass:[`+`]`.
====
==== Reserved Words

Turicum defines a set of reserved keywords that cannot be used as identifiers—unless the name is enclosed in backticks, like `+`if`+`.

The reserved keywords are:

{%#sort
{%#trimLines
{%#replace (regex) /
{%@snip KEYWORDS%}
/String\s+\w+\s+=\s+"(\w+).*;/`$1`/%}
%}%}


== Expressions and Operators

=== Literals

Turicum supports a rich set of literals, including numeric values, strings, JSON-like constants, and lists.
All literals are expressions that evaluate to immutable values.

==== Numeric Literals

Numeric literals can be either integers or floating-point numbers.

* Integers are written as sequences of digits, e.g., `42`, `0`, `123456`.
* or in hexadecimal with `0x` prefix


{%S hexNumber%}

* Floating-point numbers contain a decimal point or exponent part, e.g., `3.14`, `2e10`, `1.0e-3`.

There is no special suffix for numeric types.
Type promotion is automatic and based on the context of usage.
Internal implementation of numerical types uses `Long` and `Double`.

There is no hexadecimal floating point literal like in Java.

==== String Literals

Strings in Turicum are enclosed in double quotes (`"`), e.g., ``"hello world"``.

Backslash escapes are supported:

* `\n` — newline
* `\t` — tab
* `\"` — double quote
* `\\` — backslash

Example:

{%S string%}

==== Multiline Strings

Multiline string literals are enclosed between triple quotes `pass["""]`.

They preserve line breaks and indentation exactly as written. Escape sequences are still processed.

Example:
{%S mlstring%}

==== JSON Constants

Turicum supports JSON-like literals directly in the language syntax. These can be written using JavaScript-style object and array literals:

{%S json1%}

JSON keys can be identifiers or strings.
The values can be presented by any Turicum expression.
The value of a JSON expression is a class-less Turicum object.
The values are evaluated when the literal is evaluated.

==== Lazy JSON

To defer the evaluation of a JSON literal until it is accessed, Turicum provides _lazy JSON_ literals.

These are written with a `+&+` prefix before the JSON object:

[source]
----
&{
  `timestamp`: now(),
  user: getCurrentUser()
}
----

Lazy JSON is not evaluated at definition time.
Each field is computed lazily, on demand, using the current execution context wrapping the context where the JSON was defined.
This behavior is similar to that of closures.

In the example above `getCurrentUser()` is only invoked if and when the field `user` is accessed.
Lazy JSON objects are pinned, a.k.a. it is not possible to change any of their fields.

==== List Literals

Lists can be defined using square brackets `+[]+`.

List elements are expressions and are separated by commas:

{%S ListLiteral1%}

NOTE: The call to the built-in function `println` in the example above need the `(` and `)`.
Without that the syntax analyser will recognite `println[...]` as array access.
The possibility to omit the `(` and `)` around fucntion calls if they stand as a statement should only be used if that supports readability.

Lists are mutable by default and can be indexed using the `+[]+` operator.
They support iteration in `+for each+` loops.

Empty lists can be written simply as `+[]+`.

Lists can contain mixed types, but you are encouraged to use homogeneous lists for clarity.

List literals also support flattening other lists using the `..` prefix.
For example:

{%S ListLiteral2%}

This is also the way to concatenate lists:

{%S ListLiteral3%}

The `pass:[+]`, `-` and `*` operators are also defined for lists.

{%S ListLiteral4%}

The `pass:[+]` will concatenate the two lists, or append a single element to the list.
If you want to append a list to a list instead of concatenation, you have to enclose it into a list.

{%S ListLiteral5%}

The `-` will remove the elements from the list.

The operator `*` will create the Descartes product of the two lists.

If you want to remove a certain element or part of the list you can compose a new list from the necessary parts:

{%S ListLiteral6%}

List literals also support filters and mappers.
For example:

{%S ListLiteral7%}

will select only the even elements from the list. The expression or closure following the `?` works as a filter.

You can also apply mappers following `->`, for example:

{%S ListLiteral8%}

selects only the even elements and divides each with two.
You can have multiple mappers and filters following each other mixed.

The mappers and the filters are usually closures and have one argument.
As a little syntactic sugar the variable `it` is defined when evaluating them.
It can save up using an argument:

{%S ListLiteral9%}

To ease more the syntax, you can use ordinary expressions instead of closures:

{%S ListLiteral10%}

This makes writing filters and mappers very easy.

[NOTE]
====
The closure definition `{|x|x*2}` is technically an expression.
Saying that the mappers and filters can be an expression OR a closure is a bit sloppy, because closures are also results of an expression.
What really happens is that the interpreter evaluates the expression, and if the result is a closure, then it will apply it.
In other cases it just uses the result of the expression.
In the case of filters, the value has to be something that can be interpreted as a boolean value.
In the case of mappers, the value of the expression is used as is.

How does the interpreter know that you want the closure to be evaluated and not use the closure itself as the new value?
Closures are just objects and can be in a list.

The answer is that it does not.
If it sees a closure as the result of the expression, it will evaluate it.

If you want to map a list element to a closure, then you have to write a closure that returns that closue you want to be the list element.
====



==== Operators and Symbols

The lexer recognizes both symbolic and word-based operators.
Operators are tokenized with priority for the **longest matching operator**.

Recognized symbols are:

{%#replace (regex) /
{%#trimLines
{%@snip OPERANDS%}
 %} /`(.*?)`/`$1` /->/pass:[->]/%}

=== Operators

Operators have precendence and are evaluated from left to right.
You can use `(` and `)` to change the evaluation order.
The operators are the followings in order of growing precedence:

* `or` results the left side expression if it is defined and the right side if the left side value is `none` (undefined).
The operator does short-cut evaluation.
The right side is only evaluated if the left side is none.

{%S oror%}

*  `||` logical OR operation, shortcut evaluated.
{%@def EX=The example below demonstrates the shortcut evaluation, as it works and does not throw an exception:%}

{%S logical_or%}

* `&&` logical AND operation, shortcut evaluated.
{%EX%}

{%S and%}

Note, that you cannot divide by zero, the result is an error and not `inf`.

* `..` range operator. `start..end`` will result a range to index a list.
The first index is `start`, the last is `end-1`.
Ranges can be used to index lists as values and also in left values to replace a part of a list.
When used as a unary prefix operator, it must be inside a list literal and in front of a list to flatten the list content into the literal.

* `|` bitwise OR operation.
The operator works the conventional ways on integers.
The operator is also defined for lists.
The result is the union of the two lists with the unique elements.
That way you can also create a "set" from a list `|`-ing it with an empty list, as in the example below:
You cannot `|` floating point numbers.

{%S bor1%}

* `^` bitwise XOR operation for integer values and power in the case of double values.
It calculates the symmetric difference of lists (the concatenation of the two lists without the elements that appear in both).

{%S xor1%}

* `&` bitwise AND operation.
The operator works the conventional ways on integers.
The operator is also defined for lists.
The result is the intersection of the two lists with the unique elements.
You cannot `&` floating point numbers.

{%S band1%}

* `===`, ==`, `!=`, `in` are "the same", equal, not equal, and part-of operators.
The `in` operator works on a list to check if an element is in that list,
or on strings to check the existence of a substring.

{%S equal1%}

The operator `===` tests that the two objects are the same.
Numerical values are compared by value, but all other objects are tested for being the same, even strings.

The `in` operation works for strings checking if a string is part of another, as well as for lists.

{%S inop%}


* `<`, `+<=+`, `>`, `>=` usual size comparison operators.

{%S compare%}


* `<<`, `>>`, `>>>` left shift, right shift, and signed right shift operators.

The `>>` works also on strings and lists.
It merges the characters/elements of the two operands:

{%S shr1%}


* `+`, `-` binary and unary plus and minus.

Unary `+` does not check anything, it works on all objects and just returns the object itself.


* `pass:[*]`, `/`, `%` binary multiply, divide, and remainder operators.
The `pass:[*]` and `%` are also used in the case of strings and lists.
A string multiplied by a number will result in the string that many times concatenated to itself.
The `%` operator is also used for formatting.
The left-hand side is the format string, and the right-hand side is a single element or list of elements.

In the case of lists `pass:[*]` will result in the Descartes product of the two lists.
You cannot `pass:[*]` a list and something else, like a number.

`%` for lists creates the symmetric difference, thus the elements of the two lists which are presented mutually only in one of them.
The following example shows the use of these operators and also the Turicum list literal filtered equivalent for the symmetric difference calculation.

{%S mod1%}

.functions argument default values
[NOTE]
====
The bitwise OR `|` is not allowed in the expression specifying a default value for a function or closure argument.
You can however freely enclose the expression or a part of it between `(` and `)` and use the operator freely.
====

.pre and post increment/decrement
[NOTE]
====
The lexical elements `pass:[++]` and `--` are defined and recognized by the lexical analyzer.
This is to avoid accidentally writing `pass:[++i]` or `--i`, which would otherwise be valid expressions doing nothing.
Their meaning would otherwise be `+(+i)` and `-(-i)`.
====

They work for numerical types, string types as usually, and they can also work on any object that defines them.
The name of the method implementing the operator should be the operator itself.
There is not any name association, like in Python dunder plus.
Instead, you can use it, for example, `pass:[`+`]` as an operator identifier.

The operator methods must have one single positional argument, usually named `other`.
The functionality should implement the operation and return the result of "`this` operation `other`".
When an operation is used as prefix unary operator the value of other will be `none` and `this` will hold the value on the right of the operator.

Only `+`, `-`, `!`, `..` can be used as unary operators.

=== Operators

Operators can be overridden in the classes.
If you have a method named the same name as an operator, it will be invoked to perform the calculation.

{%S objectAddition1%}

In the example above the class is redefining the `+` operator, and it returns an object that has the product of the fields `a`.
Thus `LN(2) + LN(4)` is `LN(8)`.

[NOTE]
====
You have to use the `(` and `)` after the `print`, otherwise it will think that `LN(2) + LN(4)` is the argument and `.a` tries to use the result of the function `print`, which is `none`.
It is also possible to use the

{%sample/objectAddition2%}

format.
In this case there is no `(` following the name of the function `println`.

Generally, it is recommended to use the opening and closing `(` and `)` characters to avoid confusion.
====

You can override any of the predefined operators.

When overriding the operator `==` the result has to be something that can be converted to boolean.

{%S myEqual%}

Class `A` redefines the `==` operator to compare only the field `a`.
If there is a difference in other fields, the instances of the class are still the same.

The default implementation compares all the fields in the two objects, and it also checks that the two objects are instances of the same class.

In the example, all the objects are equal.

If we modify the equality check to consider the classes, we get a different result:

{%S myEqual2%}

== Variables and Scope

Variables can be global or local.
They are defined in scopes.
Scopes are wrapped around each other.
The top level scope is the global scope.

Scopes are created in run-time, like everything in Turicum.

=== Block scopes

Code blocks open a new scope and they wrap the surrounding scope.

{%sample scope1%}

will output

{%output%}

The variable `k` is local inside the code block, and it has no value outside.
The variable `z` is part of the wrapped context, and in this case it is global.
The block executes in its own scope, and this scope wraps the global scope.

You can nest scopes.

You can use a variable name defined in a wrapped (outer) scope essentially hiding the outer variable, but only if you do not use the outer variable in the inner scope.
You cannot refer to both in a scope.
When you use a variable defined in a wrapped (outer) scope you cannot define it after that as local using `let`.

{%sample local_redefined_error%}

will output:

{%output%}

=== Class, object and function scope

Class declarations and functions do not wrap the surrounding scope.
In the following example, modifying the global variable `glb` is not possible without declaration.
The class and the function do not wrap the surrounding, global scope.

{%sample function_scope%}

The output of the program is:

{%output%}

The methods, a.k.a. functions defined inside a class wrap the context of the class.
Whenever a method is called its own scope is created and the "local variables" `cls` and `this` are created.
Unless the method is a constructor (named aptly as `constructor`) these variables are pinned, cannot be changed.

Code inside a class, outside any method is executed when the class is defined.

{%sample class_definition%}

The code above defines a class named `X`.
This class has a class scope variable `s`.
It can be accessed as a field of the class itself `X.s`.

Variable `x` is initialized to hold an instance of this class.
Using `x.s` will reference the same variable, because objects wrap the scope of the class.

{%output%}

The following example details these different access scenarios:

{%sample object_scope%}

{%output%}

=== Closure scopes

Closures are blocks with arguments.
The general syntax is:

[source]
----
  {|arguments declaration| commands}
----

Note that executing a closure and calling a closure are two different things.
When a closure is executed, it returns the closure.
When a closure is called, the arguments are evaluated in the actual scope, and the closure is called in its scope.
The scope of the closure does not wrap the scope of the caller.
It does wrap the scope of the execution, where we created the closure.

Technically functions are closures that do not wrap any other scope.

The following example inside a block.
the closure can access and even modify the variable `whom`.

{%S closure_example%}

The variable `whom` lives only inside the block.

=== Macro scopes

macro scopes are the same as closure scopes.
Macros are closures that get their arguments unevaluated.
You can create a macro using the built-in global function `macro` with a closure or function as an argument.
Code inside macros can call the global function `evaluate` on the arguments.

This way macros can decide which arguments to evaluate and what order, or how many times.
The following simple macro reimplements the `if` command's functionality using it:

{%S macro_example%}

When a macro calls the function `evaluate` the evaluation happens in the caller scope.
This ensures the same scope and variable visibility like calling a function or closure.
The caller does not need to know that the implementation of the something it calls is a function, closure, or macro.

=== Variable Declaration

Upon first assignment the code has to use the keyword `let` to define the variable.
Until that happens, you cannot use a variable.

You cannot read an undefined variable.
If a variable is not defined, it will throw an exception.

NOTE: There is a subtle difference between an undefined variable and a defined variable having the value `none`.
An undefined variable was never defined.
An already defined variable can have the value of `none`, and it can also have type declaration.
Also, you can assign values to object fields without the `let` keyword, even to define them.

The syntax of a `let` command is the following:

[source]
----
let identifier : type = expression
----

or

[source]
----
let {identifier:type , ... } = expression
----

or

[source]
----
let [identifier:type ...] = expression
----

In the first version you assign a value to an identifier and optionally define the type.
If the type is defined, only values that match the type can be assigned to the variable.
Type is one of the predefined types or the name of the class or a java object type.
You can specify multiple types separated using `|` character.

Note that if you do not define an expression but you define a type that is not `any` or `none` then you should also specify `|none` as an alternative, because the initial value will be `none`.

The `: type` and the `= expression` parts are optional.
If the type is not defined, then the variable can get any value.
If the expression is missing the value will be `none`.
There can be multiple `identifier : type = expression` after the `let` keyword comma separated.
There are predefined type names.

{%#trimLines
{%#replaceLines replace="~case\\s+\"(\\w+)\".*~* `$1`~" replace="~//~~"
{%@snip types%}
%}%}

If the name starts with `java.` then the variable can hold a Java object.
For example `java.java.math.BigInteger` can hold any `java.math.BigInteger` object.

In other cases the type can be the name of a class defined in the program.
The class has to be defined by the time the variable is defined.

If the name of the type is specified between `(` and `)` then the expression between the parentheses is evaluated and the string value is used as a type name.

[NOTE]
====
Note that a variable can hold `none` only if

* there is no type defined,

* `none` is among the allowed types, or

* `any` is among the allowed types.

For example `let a:num;` will fail, because it allows only numerical values, but missing the initial value will try to set it to `none`.
====

You can define multiple types for a variable separating the types with `|`. For example `let a:num|str|myClass` makes `a` eligible to store a numeric value, a string or an instance of `MyClass`.

The following example declares a variable that can hold a string or a numeric value.

{%S let_with_types_example%}

If you use the format `let { identifier list } = expression` then the identifiers are not followed by expressions individually.
Instead, the expression after the `=` is evaluated once, used as an object and the fields are assigned to the variables of the same name on the left side.

{%S flat_let_object1%}

It is not an error if there are fields in the object not read during the assignment and also if some of the variables do not have matching fields.

{%S flat_let_object2%}

If you use the format `let [ identifier list ] = expression` then the identifiers are not followed by expressions individually.
Instead, the expression after the `=` is evaluated once, used as a list and the elements are assigned to the variables.

{%S flat_let_list1%}

It is  an error if there are not enough or too many elements in the list on the right-hand side.

{%S flat_let_list2%}

{%S flat_let_list3%}

If you have too many elements you can cut the list:

{%S flat_let_list4%}

If you have too few you can extend the list:

{%S flat_let_list5%}

or even

{%S flat_let_list6%}




==== Pinned Variables

Pinning a variable makes it illegal to change it in the scope.
The syntax of the `pin` command is

[source]
----
  pin list
----

The list is comma separated elements, can be

* a variable name, like `turic`,

* a variable name enclosed between `{` and `}`, like `{object}`, or

* a variable name enclosed between `[` and `]`, like `[list]`.

A variable in the list will make the variable in the current context pinned.
If the variable name is decorated with `{}` then the object, which is the value of the variable gets pinned.
Note that this is changing the object itself and not the variable.

If the variable name is decorated with `[]` then the list, which is the value of the variable gets pinned.
Note that this is changing the list itself and not the variable.

It is an error using the decoration on a variable that is not an object or list.

The following example demonstrates the different pinning possibilities:

{%S pinning%}

== Control Flow

=== Conditional Execution (`if` / `elseif` / else`)

Command `if` is very conventional and similar to any other programming language.
The syntax of the command is:

[source]
----
'if' EXPRESSION ( ':' COMMAND | BLOCK ) [ 'else' ( ':' COMMAND | BLOCK )] ;
----

If the expression is `true` the command executes the first command or block.
If the expression is `false` it executes the second command or block following the `else` keyword.
The second command or block along with the keyword `else` is optional.

The block is a series of commands enclosed between `{` and `}`.
If there is only a single command after the condition or the keyword `else` it can be preceded with a `:`, or enclosed in a block.

The conditional expression may, but does not need to be enclosed between parentheses.

The result of the command is the value of the command or block executed.
If the condition is `false` and there is no "else" block or command, then the result is `none`.

{%S ifCommand%}

The `if` command does not open a new context.
The condition, and the commands following it, and the optional one after the `else` keyword evaluated and executed in the context the `if` statement is.

If, however, the "then" or "else" commands are block commands then they themselves execute in a new context wrapping the actual context.

=== Loops

There are three types of loops in Turicum:

* `while`

* `for`

* `for each` loop.

Loops, like any command, have a result value.
The value of a loop is either the last executed command or a list of the last executed command for each iteration.

==== `while`

A while loop is front and tail conditioned.
The front condition, following the keyword `while` is checked before each execution of the loop body.
The body of the loop will only be executed if the front condition is `true`.

The tail condition is optional, and follows the body of the loop with the `until` keyword.
It is checked after the execution of the loop body.
Execution of the loop stops when the tail condition is  `true`.

{%S whileLoop%}

The body of the loop can be a command block, or it can be a single command.
If the body is a single command, not enclosed between `{` and `}` it has to be preceded by a `:`.

{%S whileLoop2%}

The value of the loop is the result of the last executed command.

{%S while_result%}

The loop can also be used to result a list.
The list will contain the results of each body loop execution.

{%S while_list%}

{%@def GET_LIST=To get the list as a result, you have to write the `list` keyword in front of the loop body.%}

[NOTE]
====
{%@def LOOP_CONTEXT_HEADER=
When a loop executes, two distinct contexts are used: an *outer context* and an *inner context*.

* The *outer context* is created before the loop begins and is discarded after the loop ends.
* The *inner context* is created freshly for each execution of the loop body and is discarded immediately after that execution completes.

The outer context *wraps* the surrounding scopes, and the inner context *wraps* the outer context. This means that both contexts have access to all variables defined in the surrounding code. Additionally, the inner context can read and modify variables from the outer context and the scopes it wraps. However, *new variables defined in the inner context do not propagate into the outer context*.
%}
* The *head condition* following the `+while+` keyword is evaluated in the outer context.
{%@def LOOP_CONTEXT_FOOTER=
* The *loop body* and the *exit condition* following the `+until+` keyword are evaluated in the inner context.

This design ensures that each iteration of the loop starts in a clean environment. Variables defined inside a previous iteration are *not available* in the next iteration, unless explicitly defined in the outer context. This approach avoids unintended side effects and provides a clear and consistent model for variable visibility and lifecycle within loops.%}
====

==== `for`

For loop is very much similar to the conventional `for` loop we have since it was invented in the language C.
The difference is that the start, condition, and end steps do not need to be enclosed between `(` and `)`.
The start, condition, and end parts are separated by `;` and they are commands.
The `;` in this place is not optional.

{%S for1%}

The `for` loop also has an optional `until` part the same way as `while`.
The next example shows the same loop with the optional parentheses but without the tail condition.

{%S for2%}

If the start command is an assignment, it is interpreted as a local assignment.


{%S for3%}

The variable `i` after the loop is still undefined.
To use a variable from the enclosing wrapped scope, you can enclose the assignment into a block.

{%S for4%}

In this last example we also use a single command as the body of the loop.
In this case the command is preceded by a `:` character.

The value of the loop is the result of the last executed command.

{%S for_result%}

The loop can also be used to result a list.
The list will contain the results of each body loop execution.

{%S for_list%}

{%GET_LIST%}

[NOTE]
====
{%LOOP_CONTEXT_HEADER%}
* The *start*, *condition*, and *step* expressions in the `+for+` loop header are evaluated in the outer context.
{%LOOP_CONTEXT_FOOTER%}
====

==== `for each`

The command `for each` iterates through a list

{%S foreach1%}

The `for each` loop can also have a tail condition.

{%S foreach2%}

You can also define an index variable following the `with` keyword.

{%S foreach3%}

The index starts from zero and increments with each execution by one.
The index variable is local to the loop.
Without this feature you would need to declare a variable one scope higher and then use it in the loop.
That would violate the locality principle, not to rely on anything out of a scope that may change and even less modify anything out of the scope, which is in this case a loop.

When used in an expression position, a `for each` loop returns the result of the last executed loop body.

{%S for_each_result%}

The loop can also return a list: to do so, use the `list` keyword before the loop body.
The result will include the result of each iteration.

{%S for_each_list%}

{%GET_LIST%}

[NOTE]
====
{%LOOP_CONTEXT_HEADER%}
* The *list* is evaluated only once in the outer context.
* The loop variable and the optional loop counter are part of the inner context, but they are pinned.
Pinned variables cannot be modified.
{%LOOP_CONTEXT_FOOTER%}
====

==== `break`

The command can break the execution of the loop and can also specify the value of the loop.

==== `continue`

Will continue the execution of the loop starting the body of the loop again without exeuting the rest of the commands in the loop body.


=== Returning, Breaking, Continue and Yielding

These three commands are in one family.
each of them can pass a value, and each can have a conditionality following the expression.
The syntax is

[source]
----
break [expression] [if condition]
return [expression] [if condition]
yield expression [if condition]
----

The expression and the `if condition` parts are optional, except for the `yield`.
When the conditional part is missing, the command is executed like if it was `if true`.

You can interchangeably use the `when` keyword instead of `if` in this case.

==== `break`

The command `break` stops the execution of a loop.
If it is executed, the value of the loop will be the expression that follows the command.
If it is missing then the value `none` will be the result.

There is a slight difference between not having an expression or having an expression returning `none`.
When the `break` command is used in a lis-resulting loop and there is an expression following the `break` keyword the value of this expression will be appended to the list as the last value.
When there is no expression, then the execution of the loop still terminates, but no expression will be appended to the result list.

The following samples demonstrate these cases.

{%S break1%}

{%S break2%}

{%S break3%}

{%S break4%}

{%S break5%}

The last example shows the difference between using the break statement following an `if` condition.
In the first case the statement executes in the context of the loop and the `break` aborts the execution of the loop.

In the second case the `break` is inside a block, and it aborts the execution of the block itself, the loop is not disturbed.

{%S break6%}

When the expression following the `break` keyword starts with the `if` keyword the expression has to be enclosed between `()` parentheses.

{%S break7%}

==== `continue`

The continue command will "break" the current loop execution and start the loop over for the next iteration.
In the case of a for loop, the step command will be executed, and the exit condition will also be evaluated.

The `continue` command can have an expression, but it is only allowed if the loop is a list-resulting loop.
In this case the value of the expression will be appended to the resulting list.
If the value of the expression is `none` then `none` as a value will be appended to the list.
If there is no expression after the `continue` keyword, then the resulting list will remain untouched for the actual execution.



==== `return`

The command `return` stops the execution of a function, method, closure, or macro.
If it is executed, the value of the function, method, closure, or macro will be the expression that follows the command.

If there is no expression following the `return` keyword then `none` will be returned.

{%S return1%}

==== `yield`

The command yield produces a value, and the execution of the code continues.
It can only be used when the code was started so that another thread is expecting the yielded value.
The typical example is when you execute a command `async` .

{%S yield1%}

The return value can be used in a `for each` loop, or you can iterate through it the same way you would with any iterator.

{%S yield2%}

=== `with`

The `with` command executes a block in the context of one or more objects, and also it functions as a resource manager like similar to Python.

[source]
----
with object list { block }
----

or

[source]
----
with object list : command
----

The `object list` is a comma separated list of expressions each with an optional `as identifier` part.
When there is an `as identifier` the functionality is similar to that of Python.


{%S withAs%}

When there is an `as ID` after the expression, then the expression is treated as a resource.
The method `entry()` is invoked on the resource, and the returned value is assigned to the given `ID`.
The returned value is usually ab object to handle the resource.

For example, if the resource is a file, then the handle is an object you can use to write into a file.

The identifier is used in the block following the `with` command referencing the handle returned by `entry`.

If `entry` returns `none, then the resource is used as a handle.
This can be used in simplified cases when the resource and the resource handle object are the same.

When the execution of the block is finished the method `exit` will be invoked on the resource (not on the handle).
This method will be invoked even if there was any error during the execution of the block.

{%S withAsExceptionHandled%}

The argument to the method is the exception that was raised while processing the block, or `none` if there was not any.
If the return value of the method `exit` is `true` or anything that can be converted to boolean and has the value `true` following the cast, then the exception is treated as caught and handled.
If there is any exception during the closing, then it will be thrown.
Exceptions during resource closing do not get suppressed.

If there are more than one resource in a `with` statement, then their `entry` method is called from left to right and then `exit` methods from right to left.
The last "opened" resource is closed first.

[NOTE]
====
Handling the resources this way is similar to how Python handles the resources with some notable differences.

* There are no underscore characters in the name of the method `entry` and `exit`.
* `exit` may not exist
* `entry` may return `none`.
It has the same effect, and it is also recommended to return `this`.
* `exit` gets only one argument, the exception that holds all the information.
In Pythn you get the stack trace and the exception type in a separate argument.
* You _MUST_ provide an `as` alias for resources, otherwise the expression is not treated as a resource (see below).
====

If the expression following the `with` statement is not followed by an `as` and an alias, it is treated as an ordinary object.
The fields of the object get mapped to the actual context.
It means that the fields of the objects can be used as variables without prefixing them with any object reference.

{%S simpleWith%}

Technically, the command executes the block in a context that references the fields of the object and wraps the surrounding scope.
When more than one object is listed, then multiple wrapping scopes are created from left to right.
It also means that the objects to the right shadow the objects to the left.
In the example both `x` and `y` have field `a` and since `y` is later in the list the field of `y` is used.

You can also modify or even create fields:

{%S modifyWith%}

Note that the field `x.a` was not modified, because it is shadowed by `y.a`.
You can only create new fields in the right most object.

The value of the command is the value of the block executed.

{%S valueWith%}

=== Asynchronous execution

You can execute any command asynchronously using the `async` command.
You symply have to wite `async` in front of the command.
The command will start the execution in a separate thread (Java 21 virtual thread) and the starting thread will go on executing.

The return value of the `async` command is a handler to the started task.
The type is `task`.

To wait for the finishing of an asynchronously started command, you should use the `await` command.
It will also result in the value returned by the task.

In addition to returning a value, a task can also receive and send objects.
The `yield` command inside the task will either receive an object or send an object.

{%S async%}

A task object implements the following methods:

* `is_done` is `true` when the task has finished.

* `is_cancelled` is `true` when the task was cancelled

* `is_err` is `true` when the task ended in an error

* `get_err` returns the error

* `get` returns the result of the task.
It is the same as the result of the `await` command.

* `close` close the channel to the task.
After calling this method, you cannot send anything to the task and the task will see that the channel is closed.

* `send` will send an object to the task

* `has_next` will be `true` if there are objects send by the task

* `next` gets the next value from the task

The command `async` has four parameters:

* `in` can give the size of the queue for objects to be sent to the task.
The default value is no limit.
If the queue is limited and full, sending an object will wait till a place is freed.

* `out` can give the size of the queue for the task to yield back to the main thread.
If the queue is full, the task will wait.
This can be used to limit the memory and CPU usage of infinite generators.

[NOTE]
====

Say you want to create a generator that returns the prime numbers.
If you do not limit the channel size, the generator will run ahead and fill in the memory with prime numbers.
Limiting the channel size you can balance the calculations.
The generator will stop when it has generated enough numbers and starts when some of the result is consumed.


{%S channel_limit%}

In the output you can see that the calculation went ahead uselessly in the first case.
In the second case the calculation was limited.
====

* `steps` limits the number of elementary steps in the execution.
The task will stop after this many steps (planned feature).

* `times` limits the time of the task, unit is milliseconds.
The task will stop after the specified time (planned feature).


These parameters can be specified after the `async` keyword between `[` and `]` characters.
When the command to be executed asynchronously starts with a `[` character you either has to have `[]` in front of it or enclose the command between `(` and `)` or `{` and `}` to help the syntax analysis.

The command can also execute a list parallel.
When the expression to execute asynchronously is a list literal, then the command will execute the individual elements of the list parallel.
In that case the result is a list of tasks instead of a task that results in a list.

The following example creates a list of `[1,2,3]` in the conventional way and also parallel.
It prints out the elapsed time using the built-in `nano_time` function.

{%S asyn_list%}

As you can see, in the first case the execution time is a bit above 300ms, which is the three times 0.1sec waiting in the function.
In the second case the functions wait the same time, parallel, and the execution time is just above the 100ms single wait time.

[[flow-command]]
== `flow` Command

The `flow` command defines a *reactive execution block* in which named expressions (called *cells*) are evaluated in a concurrent and data-driven fashion.
It is particularly useful for implementing iterative or mutually dependent computations where values must be recalculated until a condition is satisfied or a fixed number of changes have occurred.

Cells are defined as variable-expression bindings, and their dependencies are automatically detected by analyzing identifier usage.
When a cell value changes, all other cells that depend on it are automatically rescheduled for evaluation in a new thread (using Java virtual threads).

The `flow` block terminates under one of the following conditions:

- The `until` condition evaluates to `true`.
It is repeatedly evaluated after each task in the context of the `flow` command.
- The maximum number of task executions (`limit`) is reached.
- The allowed wall-clock execution time (`timeout`) is exceeded.
- The flow reaches a stable state, there are no more tasks to run.

In these cases the already scheduled tasks are still executed before the flow stops.

If a `yield` expression is specified, its result is returned as the result of the `flow` command.
It is evaluated once after all scheduled tasks are finished.
The evaluation happens in the context of the `flow` command.
If there is no `yield` in the `flow` command `null` is returned.

The evaluation starts with the cells that have no dependencies.
These are evaluated in asynchronous threads.
Scheduling and executing tasks based on dependencies start when the start cells are all finished and the flow has reached the initial state.

If there are cells that have dependencies, and that way they are not start cells, but their transitive closure of their dependencies does not include any start cells, it is en error.
It is detected during compilation time and results in a syntax error.

=== Syntax

The basic syntax of the `flow` command is:

[source]
----
flow [<identifier>] [until <condition>] [limit <maxTasks>] [timeout <seconds>] {
  <identifier> <- <expression>
  ...
  yield <expression>
}
----

- the identifier following the `flow` keyword is optional.
It is used solely for diagnostic purposes.
It does not get into any symbol table, does not hide any object of the same name in the context hierarchy.
It is used only in error messages and is available for command introspection.
This identifier cannot be `limit` or `timeout`, because those signal the start of the limit and timeout expressions respectively.

- `until <condition>`::
Optional.
A boolean expression that terminates the flow once it evaluates to true.
- `limit <maxTasks>`::
Optional.
A numeric constant that sets the maximum number of dependent cell executions allowed.
- `timeout <seconds>`::
Optional.
A numeric constant (may be fractional) specifying the maximum wall-clock time allowed for execution, in seconds.

[NOTE]
====
`until`, `limit` and `timeout` are all optional and can be in any order.
`limit` and `timeout` are not keywords.
The syntax analyzer would not know if they start the limit or timeout definition or you want to name the flow to "limit" or "timeout".
You cannot name the flow to either of these.
====

Each

[source]
----
<identifier> <- <expression>
----

is a __cell__.
During the execution the expression, which can even be a whole block, just like any expression in Turicum, is evaluated asynchronously, and when it is ready, the resulting value updates the flow local variable on the left side of the `pass:[<-]`.

The expression is the cell expression.
The identifier is the __cell state variable__.

When the syntax analysis is done, the compiler performs several semantic checks.
It checks that there are __start cell__s, that can be calculated independent of any other.

There should be no two __start cell__s updating the same __cell state variable__.

Following this analysis, the compiler checks that each cell is reachable from the __start cell__s.
There should be no cells that are not reachable.

NOTE: Unreachable cells only can happen if a cell depends on itself or there is a circular dependency.
Without such a dependency the cell would be a start cell.

The last check is that all dependency circles contain at least __start cell__.
If there is a dependency circle that does not contain a __start cell__ that circle would result in the use of a __cell state variable__ uninitialized.

If any of the checks fails, the compiler results in a syntax error and the command is not created.

=== Semantics

The `flow` block contains a series of *cells*.
Each cell defines a named variable and an expression that computes its value.
These variables can reference each other, and the runtime will detect and track these dependencies.

When a __cell state variable__ is updated,
(i.e., its computed value differs from the previous value in the local context),
all cells that depend on it are automatically rescheduled.
This process continues until one of the termination conditions is met.

A __cell state variable__ is updated if

* it was undefined and the new value is not `non_mutat`, and not `fini`, OR
* it was defined and the value of the evaluation does not `equals` the current value.

When the value of the __cell block__ evaluation is `non_mutat` the __cell state variable__ is not updated.

When the value of the __cell block__ evaluation is `fini` the __cell state variable__ is not updated and the cell will not be scheduled anymore.
If there are already running instances of the cell, they will finish and possibly update the __cell state variable__ assuming they were started after the cell block that resulted the `fini` value.

When a result is `fini` the __cell state variable__ counter is updated, even though the variable value is not, thus any block that was started earlier and not finished yet will not update the variable.

When the result if `non_mutat` nothing is updated.

NOTE: `fini` and `non_mutat` are predefined pinned global constant objects.

Cell evaluation is performed in isolated thread-local contexts derived from the flow's original context.
This context contains the flow context variables as copies and read-only.

The system avoids infinite re-evaluation loops by tracking value stability and respecting the `limit` and `timeout` constraints.

The execution of the code blocks is done asynchronously.
There is no guarantee for any order.
When it is recognized that a cell variable one of the blocks depends on, (uses it as a variable in some calculation), then it will be scheduled for execution and started as soon as the JVM and the operating system start it.
Each cell block is executed in a new virtual thread.

It may happen that the same block executes parallel in multiple instances.
It could lead to instability in the flow.
An earlier started version may run longer than a later instance.
Also, different blocks may update the same {%@def CSV=__cell state variable__%}.
To avoid this the `flow` command only updates a  {%CSV%} to the value resulting from a cell block execution only if the {%CSV%} was not updated in the meantime.
If the {%CSV%} was already updated, the result is ignored.
It is implemented using {%CSV%} version counters.

When the command is created, the dependencies between the {%CSV%}s are analyzed.
Those cells that do not depend on any other cell are {%@def SC=__start cell__%}s.
They will be executed first.

It is important that other cell calculations start only after the {%SC%}s have been calculated.
If you have multiple {%SC%}s and a cell block depends on more than one, then they will both be defined when the dependent cell calculation starts.

[NOTE]
====
- The order of `until`, `limit`, and `timeout` is flexible in the syntax.
- All expressions in the `flow` block are commands and follow standard language rules.
- Only direct assignments (`x <- expression`) are allowed; complex control flow must be expressed inside expression blocks.
====


=== Use Cases

The `flow` command is useful for:

- Converging numeric approximations (e.g., computing square roots)
- Reactive data propagation
- Declarative fixed-point computations
- Defining cyclic dependencies with convergence guarantees

=== Examples

This example demonstrates a classical use of the `flow` command for computing square roots using the Babylonian method.
It shows how reactive cells can update each other iteratively until convergence is reached, and how the `until` clause controls flow termination based on a numeric precision condition.

{%S example_flow_squareroot%}

This example illustrates how the `flow` command can be bounded by wall-clock time using the `timeout` clause.
It simulates a long-running or slow computation and demonstrates how flow execution is safely terminated after the specified time limit.

{%S example_flow_timeout%}

This example highlights the use of the `limit` clause to constrain the number of task executions within a `flow`.
It shows how the system halts with a clear error message once the execution limit is reached, making it useful for preventing runaway or cyclic computations.

{%S example_flow_limit%}

The next example demonstrates that you can access the structure of the flow command or to any command.
In the example the flow command is not executed, rather stored in a variable, and then the dependency graph of the cells is printed out.

%S flow_mermaid_output%}

== Functions

Functions play a similar role as in other languages.
They can be top-level functions and methods attached to classes or to objects.

=== Function Declarations

A function declaration is a statement that defines the function.
The function will be usable after the function definition was executed.
The syntax of the function definition is

[source]
----
fn function_name (parameters) : types {
   body
}
----

or

[source]
----
fn function_name (parameters) -> types {
   body
}
----


`fn` is a keyword, and it is never optional.

{%S fun1%}

`function_name` is the name of the function.
It may be missing, typically when the result, the function itself is assigned to a variable or passed directly as an argument.

{%S fun3%}


`(parameters)` are the parameters, including default values and parameter types and parameter-passing requirements.
The `(` and `)` is optional when the function has a name.
When it does not have a name, then `(` and `)` must present even if there are zero arguments.

{%S fun2%}

The body of the function can be a block of statements or a single expression.
The expression is specified following a `=` character and the parentheses are a must in this case also.
This is to avoid the unreadable `fn = 2*3` to be declared as a function declaration but `pass:[`fn`]=2*3` an assignment.
`fn = 2*3` is a syntax error.

Be careful when using the `fn x()=...` format.
The following code does not do what you expect:

{%S fun10%}

The expression following the `=` is an identifier, which by the time of the invocation results a callable object.
The string following it is not part of the expression.
The string constant is just a statement with no effect.

If you use the `(` and `)` characters after the `println` function call, then the expression will include the string argument, and the code will work as expected.

{%S fun11%}

The parameter list is comma-separated.
Each element defines a formal parameter.

Types are optional and follow the same syntax as in the case of variables.
The individual types can be identifiers or `(` and `)` enclosed expressions.
The types are separated by `|`.
The type of the returned value is checked against the declared types upon returning from a function.

{%S fun7%}
{%S fun8%}

The types are evaluated when the function is defined.

{%S fun9%}

There is no effect changing the value of the variable `myString` to `str` when the function was already defined.

==== Parameter Passing

When a function is invoked, the actual parameters can be passed to the function in two different ways:

* by position, and
* by name.

Some parameters can be passed in both ways, some of them only positionally, some only by name.
This is declared in the formal parameter list.
Each parameter declaration starts with the identifier of the argument.
This is the identifier how the function body can use the variable as well as the identifier the called can use if the parameter is passed by name.

Parameters preceded with '!' can only be passed positionally.

Parameters preceded with `@` can only be passed by name.

{%S fun4%}

Here `x` is a positional parameter.
Passing a value as `x=1` would be an error.
Parameter `how_much` must be passed by name.

Parameters can also have type declarations and default values.
If there is a type declaration passing a value that does not fit the type declaration is an error.
Not passing a value for a parameter that does not have a default value is also an error.

{%S fun5%}

Parameter types and the default value assignments have the same syntax as in the case of variable assignment.
There is one notable difference: default value expressions can use the binary or `|` operator only if it is between parentheses.

==== Positional and Named parameters order

You are allowed to use positional and named parameters intermixed.
There can be a named parameter and then a position following it.
It may be beneficial in some special situations, but the general recommendation is not to overuse this feature.
List the positional parameters first, named following, and optional parameters (see soon) the last.

The actual algorithm of parameter passing is the following:

* The actual arguments are evaluated from left to right.
* Named passings are assigned to the argument with the matching name.
* Positional arguments are assigned to the first non-named only argument.
That is the first not-yet-assigned positional or positional/named argument.

{%S fun6%}

[#_extra_parameters]
==== Extra parameters

In some cases you want to allow the callers to pass extra arguments and your function body to use them.
To do that, there are three extra arguments you can use in your function definition:

* `[rest]`,

* `{meta}`, and

* `^closure`.

You can name them any way you want, but for the same of simplicity we will use the names above.
The syntax distinguishing them from the other parameters is the use of the extra `[]`, `{}`, and `^` characters.
If they are present, they have to be the last formal parameters in the order as listed above.
Any of them may be missing, but if two present then `[rest]` should be before `{meta}` and `^closure`, and `{meta}` has to precede `^closure`.

When the function code starts

* `rest` will be a list containing the value of the positional arguments that were not yet assigned to any parameter.
* `meta` will be an object with the named parameters not assigned as field names and the values holding the values.
* `closure` will hold the last parameter of the function call that usually is a closure.

The following example shows how you can use the rest-parameter:

{%S restParameters%}

The following example demonstrates the use of the meta-parameter:

{%S metaParameters%}

[NOTE]
====
When you

* have a `!name` declared positional only parameter, and
* you also have `{meta}` in the parameter list, and
* and you call the function providing a `name=expression` named argument,

it will not be assigned to the positional only parameter, and it is also not an error.
It will be a field in the meta-parameter object created.

The reason for this is that the naming of the positional only parameters is not part of the function signature.
They are the internal business of the function itself, and as such must not have any effect how you call the function.

On the other hand, no named parameter name, or named/positional parameter name will get into the meta-parameter.

Also, you cannot use a parameter name in an argument list more than once.
====


You can also combine the two:

{%S metaRestParameters%}

The last argument, preceeded by the `^` character is special.
When you call a function and the last argument is a closure then you can place that closure outside of the `(` and `)` of the arguments, but ONLY if the closure is defined right there.

For example:

{%S closureArgument%}

The function gets the closure adding the two numbers and then prints the numbers and the result.

The example:

.wrong example
[source]
----
let f = fn (a,b,^closure) {
  println("a=",a);
  println("b=",b);
  println(closure(a,b))
}
let closure = {|x,y| x+y}

f(2,3)closure
----

does not even compile, since the mandatory `;` or new line is missing after the function call.
Also, it would be unreadable to recognize `closure` as an argument.

NOTE: The actual implemented syntax checks that the next two tokens following the `)` are `{`and `|`.

This call can aid in creating domain-specific languages.

==== Spreading lists and objects as arguments

When calling a function, you can precede a parameter with the `..` operator.
This will spread the content of the parameter to parameters.

If the value of the parameter is an object, the fields of the object will be used as named parameters.
The field names will be used as argument names and the values as values.

{%S spread%}

If the value is a list, then the values will be used as positional parameters.

This is useful when you want to pass on parameters you got in the `rest` or `meta` parameters to some other function.

[NOTE]
====
Technically you can spread any value resulting from an expression that implements internally the `HasFields, or `Iterable<?>` interface.

Currently, the following classes implement the `HasField` interface:

* `Lex` one token in the lexical analysis.
It is used in preprocessors written in Turicum.

* `LexList` the list of the tokes.
Just like the class `Lex` it is used in preprocessors.

* `Closure` is the implementation class for functions and closure.
There is one, read-only field, `name`.

* `Macro` is the implementation class for macros.
There is one, read-only field, `name`.

* `JavaObject` is the class that implements the handling of any Java object, when all else fails.
It implements reflection to access the declared fields of the class on the enveloped object.

* `LazyObject` is the lazy object that has fields which are evaluated every time they are accessed.

* `LngClass` Turicum class object.
It handles the class level fields.

* `LngException` is any exception caught by a `catch` in the program.
It has a constant set of read-only fields.

* `LngList` Turicum lists.
It has one read-only field `length`.
This class also implements Iterable and is handled as such when used in an argument list spread.

* `LngObject` is a Turicum object.

* `MapObject` any Java `Map<?,?>` object.
The implementation will handle the keys as strings.

The following class implement the `Iterable` interface in Turicum, which do not implement the `HasField` and thus can be spread as positional parameters:

* `IndexedString` envelops a string during commands that modify a String.
This is the technical implementation internally replacing an unmutable Java String with a mutable wrapper around.

* `JavaArray` makes it possible to index any Java array.

* `LngList` is the list object in Turicum.
Although this class also implements the `HasFields` interface this is handled as an exception and passed as positional arguments when spread.

* `AsyncStreamHandler` is the class handling asynchronous operations and yields.
It makes it possible to use the result of a `async expression` as arguments.
+
{%S spreadStream%}
====

=== Modifying Arguments
Function arguments in Turicum are immutable.

When a function is called, its arguments are *pinned*—they are bound to their initial values and cannot be reassigned within the function body.

The only exception is the `init` method, which acts as the object initializer.
In this case, the arguments correspond to the fields of the object being constructed.
Assignment is allowed during initialization, because these fields persist beyond the execution of `init`.
If they were pinned like regular arguments, the object's fields would become permanently immutable, which is not desired.

== Classes and Objects

=== Class declaration

Classes can be defined using the `class` keyword.
A class is defined when the class definition is executed.

{%S class1%}

Classes can contain methods and can define class variables.
In the example above the class contains the method `init`, which is a special one and declared one variable, `c`.

The method `init` is the initialized method.
It is invoked when the class is instantiated.
To create an object, you should use the name of the class like a method with parameters.
The parameters will be passed to the `init` method.

When executing a method, there are two special variables:

* `this` is the current object.

* `cls` is the class of the current object.

If you use a variable without the `this.` prefix it will automatically be handled, but you can just use the `this.` prefix any time.
That way the following example is the same as the previous:

{%S class2%}

When using variables in a class first the object variables are consulted.
If there is no object variable, then the class variables are used.
Classes and the methods inside the classes do not wrap any surrounding context.

The methods defined in a class belong to the class.
You can define methods attached to the objects.

{%S class3%}

The variable `cls` and `this` are pinned, cannot be modified in the methods.

{%S class4%}

and

{%S class5%}

The only exception is the `init` method.

{%S class6%}

The example above alters the `this` variable, and it alters what the construction of the class returns.
That way an initializer can function as a factory method.

You cannot change the value of the `cls` even in the initializer:

{%S class7%}

Classes can be nested and defined inside other classes.
When calling the constructor of the class to create a new instance then the variable `this` would be ambigous.

For `a.Z()` it usually points to `a`, but if `Z` is a class, and we called the constructor, than `this` should be the new instance.
In this situation a special variable called `that` will point to `a`.

{%S class8%}


=== Class inheritance

Classes can inherit in Turicum.
When you declare a class the parent class or classes are specified by their name after a `:`.

{%S inherit1%}

You can use the methods or fields declared in the class as well as any other method defined in the marent classes.
You can inherit from multiple parent classes:

{%S inherit2%}

Inheritance is ordered.
It is important when there are multiple implementatios of the same method name or the same field.

{%S inherit3%}

In the example `P1` is inherited/extended first in the list, so it prevails over `P2` when there is a name collision.

Initializing a class having parent classes is a bit tricky.

{%S inherit4%}

Since there can be, and in the example there are multiple parents, the initialization does not automatically invoke the initialization of the father classes.
You may invoke them directly:

{%S inherit5%}

If you do not implement `init` but some of the parent classes do, then it will be invoked.

{%S inherit6%}

Note the difference in the value of the field `cls`.
When the parent class `init` is invoked directly from the child `init` the `cls` points to the parent.
When it is inherited, the `init` is executed in the context of the child class, it is simply inherited, hence the value of the field `cls` points to the child class.

== Error Handling

Error handling is similar to Java.
If an error happens, an exception is thrown.
An exception can be caught using `catch` pairing with a `try`.

An exception is an object.
You can declare a variable to hold an error

{%S try3%}

The predefined type for an exception is `err`.

An exception has

* `stack_trace`

* `message`

* `cause`, and

* `supressed` fields.

`stack_trace` is a list (`lst`), each element is an object with the fields:

* `file`
* `line`
* `column`
* `source`

{%S try4%}

=== Try-Catch

Try is very similar to Java `try`-`catch`-`finally`.
The command `try` tries to execute a block.
If an exception happens it executes the block following the keyword `catch`.
At the end it executes the block following the `finally` keyword.

The syntax of the command is

[source]
----
try ( ':' COMMAND | BLOCK ) [catch [exception_variable] (':' COMMAND | BLOCK)] [finally (':' COMMAND | BLOCK)]
----

The command is executed in the same context as the whole try-catch command.
If, however, a block between `{` and `}` is used, it will create its own context.
In this case the use of the `:` is optional and is also discouraged, as clutter.

If there is an exception variable specified, it will be defined when the exception is caught.
This is same as defining a variable using the `let` command.
It will hold the value of the exception during the execution of the catch part and after the whole try-catch command.
If there was no exception the value of this variable will be `none`.

The exception variable can be defined as `catch(e)` with parentheses to be a bit more familiar for Java developers.

If an exception happens, the execution of the try command stops, the exception variable will get the exception object and the catch block starts to execute.
The exception variable is not available during the execution of the try command.

The exception variable is pinned, cannot be modified.

The value of the try-catch command is

* the value of the try command if there was no exception, and
* the value of the catch command if there was an exception.

The command after the `finally` keyword does not affect the result of the command.

== Decorators, Metaprogramming

Decorators are an inherent part of Turicum.
To make them similar to Python decorators and Java annotation, they can have a `@` in front of the decorator function call.
However, in the case of closures, you do not even need that.
Every function call that has a closure as the last parameter can act as a decorator.

{%S closureDecorator1%}

If you add a `@` then the result is the same:

{%S closureDecorator2%}

The `@` helps you emphasize that the call is a decorator call that modifies the closure following it.
The use of `@` also notifies the syntax analyzer that the call is a decorator call, and it extends the recognition of the following `^closure` parameter.
When the `@` precedes the function call, a `fn` or `class` are also recognized as `^closure` parameter.

{%S fnDecorator1%}

Without the `@` the program is still valid.
However, as soon as we try to invoke `z()` the program fails.
It tries to invoke the closure returned by `fun_decorator()`, which tries to call `closure()` which now has the value `none`.
This happens because the syntax analysis does not use the function definition as a parameter.

The code can, however, be fixed:

{%S fnDecorator2%}

The application of the `@` is therefore only a syntactic sugar.
The following example shows that a decorator can not only return the decorated 0, class, or closure.
They can also modify the existing definition.

{%S fnDecorator3%}

Technically the decorator does not modify the function `q`.
It creates a new function and redefines the variable named `q` in the wrapped context.

Note, that if `fun_decorator` was a function declared with `fn` it would not work.
A function does not wrap the surrounding context and thus cannot redefine anything in it.
To redefine an already existing variable, it needs to be a closure.

You usually just assign a value to the variable updating its value.
In this case we have to use the built-in `set` function, because we have the name of the variable as a string.

In the following example we moved the function definition to a local scope.
The decorator in this case simply defines the global variable of the same name as we used locally for the function.
The value is the closure or function, whatever we decorate itself.

{%S fnDecorator4%}

Since we use `set_global` the decorator can be a function, it does not need access to the enclosing context.

=== Macro and Reclose

The built-in functions `macro` and `reclose` are special closure conversion functions.

The function `macro()` accepts a closure as an argument and returns the closure converted to a macro.
The major difference between ordinary macros and closures is that the argumente of a closure are evaluated before starting.
A macro gets its arguments unevaluated.

=== Special variables

There are a few predefined variables, constants, and some special variables.

{%#trimLines
{%#replaceLines replace="/\",.*$/`/" replace="/\"/* `/" replace="~//~~"
{%@snip builtins%}%}%}

The special variables are not constants.
They are defined dynamically to represent the current computing environment.
These are the following:

* `this`

* `cls`

* `that` will point to the object on which a method was called when the method is a class constructor.
Class constructors are invoked using the name of the class.
When a class name is used as a field in an object either directly injected to the object or as a class field as in the next example, then the constructor can access the target object of the call through `that`.
+
{%#replace (regex detectNoChange) /{%S that%}/.output/+
.output/%}
+
Usually the target object is called `this`, but in the case of the constructor `this` points to the current object to be initialized.
What is more, the constructor, always named `init()`, is allowed to modify the variable `this`.
In this environment `this` cannot be used for both the object to be initialized and the target object.
Hence, the special variable `that` was introduced.
+
You will hardly ever need it.

* `me` it always points to the currently executing function or closure.
You can use it to furnish recursive calls.
It is necessary when a function is defined in a local context it does not capture.
For more read the next section {%@def FUNC=Function scopes and `me`%}.

=== {%FUNC%}

Functions are usually defined in the global context or as methods inside classes.
In both cases there is a wrapped context that contains the name of the function defined.
It is either the global context or the class context.

The following example is very straightforward.
It defines the function `fib()`, that calls itself recursively.

{%S fibonacci1%}

If we create the same program using a class memoizing the results:

{%S fibonacci2%}

we get the same result and there is no problem with that.
In this case `fib()` is a class level method, and when we call it Turicum automatically calls it as a method.

The difficulty comes when you define the function in a local context.

{%S fibonacci3%}

The function does not see itself.
The function `fib` in this case is defined in the local context of the block, and functions do not wrap the surrounding context.
One solution can be to convert the function to a closure:

{%S fibonacci4%}

Closures wrap the surrounding context, therefore the body of the closure knows the value of `fib`, which is the closure itself.
If you do not want to wrap the whole context, you can do a little trick using functions.

{%S fibonacci5%}

The function `fib` has an extra optional parameter.
The left side of the `fib=fib` is the name of the parameter, which will become a variable in the context if the function.
The right side is the default value, which is evaluated in the caller context before the call.

One may like this approach, for explicitly declaring that `fib` needs access to `fib` hence a recursive call.
Others may find it cryptic,
and it is not really clear
without knowing the details how contexts and default values for variable declarations work in Turicum.

An alternative possibility is to use the special variable `me`.

{%S fibonacci6%}

This variable is reserved for this purpose, and it gets the function itself as its value before a function is called.
It may also be appealing that the recursive call is explicit whatever the name of the function is, not needing renaming when the function is renamed.

As an extra, here is a version of the fibonacci calculation using a closure with a retained local context as a state instead of a class:

{%S fibonacci7%}

Finally, here is a modified fibonacci calculation that can replace the start value and uses an object cache instead of class level cache.

{%sample/fibonacci8%}

We do not include here the printout.
The first number you already know, try to guess the second, then run the code yourself.

== String Functions

Turicum defines many methods to handle strings.

{%S string_functions%}

== Built-in Functions

Built-in functions are functions provided by the interpreter, which extend the functionality of the run-time.

=== `evaluate`

Macro implementations use this function.
Macros get their arguments unevaluated and can use this function to evaluate them.
If you try to evaluate anything else than a macro argument, you will get an error.

{%S evaluate1%}

The following example uses all the possible tools that can appear in a macro and a function.
The actual functionality is basic: it just invokes the closure or function provided as the first argument with the rest of the arguments passed on.
In real life you could just call the function itself without making it through a macro, but in this case we focus on doing that and how.

The unnamed function, which is the argument of the macro, has a mandatory, position-only argument and all the three extra arguments.
The first argument will be the function or closure we will call.
The function first called `evaluate` to get the function or closure.
Since this function is never called as a function, only after it is converted to be a macro, the argument is never a function, but a function definition.
Evaluating it will result in the function.

When we call this function adding `(..rest,..meta,..closure)` after it we spread the extra parameters.
In this example the three argument values for these parameters are

* `{}` empty object,
* `[]` empty list, and
* `none`

None of them adds extra parameters when spread.

{%S evaluate2%}

To be honest, since the evaluation of the argument happens only once and without condition, this functionality does not really need a macro.
It could be shortened as

{%S evaluate3%}

Note, however that the code starts with a `(`.
That will make the function definition be part of an expression and process the following `(fn () {println("Hello")})` as an argument.
Without that we would have two unnamed function definitions, one after the other.

[NOTE]
====
The first design required enclosing a function definition like the one above to be enclosed between `{` and `}` to be part of an expression.
In most of the cases, like assigning a function to a variable would require superfluous `{` and `}` braces.
The philosophy of Turicum is to be dense and use extra characters where it helps readability or avoids syntax ambiguity.

Omitting the requirement around a `fn` (or for that matter a `class`) definition inside an expression make the language leaner, but this does not make a function or class definition to be an expression itself.
====

=== `import`

Import allows you to get definitions in other files into your code.

Technically, the function loads a Turicum source file, executes it, and returns the global context as an object.
If you have function or class definitions in the imported file, they will be fields in the new object.
Instead of introducing a new command, Turicum uses this function.

Other languages separate the module names, class names, and alias definitions.
In turicum when you import `mod.dul.name.file` it will find the file in one of the `mod/ul/name` subdirectories^*^ in the file `file.turi` via the appia.

You can assign the returned object to a variable.
If you want a specific class or function in your name space you can simply `let` assign it to a variable

[source]
----
{%#ranges range=2..-2
{%@snip import%}%}
----

The import searches for the file in the directories listed in the environment variable `APPIA`.
This variable is a list of directories separated by `|` characters.
They are searched from the first to the last until the file is found.

=== `sys_import`

This command can be used to import Turicum system files.
These are classes and functions that give an interface to the surrounding environment through the Java VM.
Although Turicum can call any Java method using the functions `java_object`, `java_call` and `java_call_vararg` there are not meant to be used in application code.
They are primitives and are used as part of the system library part of the run-time.
When you use `sys_import` you import the file from the Java resource path, that delivers more Turicum idiomatic API.

=== `export`, `export_all()`

These are two functions to be used in files imported.
The macro `export` will export the variables listed as arguments.
That way these variables will be copied into the context of the importing code.

`export_all()` will export all the variables from the importing scope.
Note that in the case of `export_all()` you cannot omit the `(` and `)`.
If you do, the line will be an expression with a function as a result, and the execution will not call the function.

=== `java_...`

There are three functions in this group:

* `java_object`,

* `java_call`, and

* `java_call_vararg`.

==== `java_object`

This function can be used to create new instances of any Java class.
The first argument to the function is the binary name of the class.
The rest of the arguments should be the constructor arguments.

Since Turicum stores numbers as Double and Long, strings as Strings, boolean values as Boolean without any wrapping class, calling this function is straightforward when the constructor arguments are one of these primitive values.
If the parameter type is something else, then you have to use to create that object calling `java_object()`.

==== `java_call`

This function calls a Java method.

The first argument is either

* the object on which we want to call a method, or

* the name of the class to call a static method on.

The second argument is the name of the method. The rest of the arguments are passed to the Java method.
The return value is the value returned by the Java method.

==== `java_call_vararg`

This function should be used to call a vararg method.

An example of the use of `java_call` and `java_call_vararg` from the early stage of `io.turi`:

[source]
----
class files {
    fn read_all_lines(file_name_or_path){
    println(file_name_or_path)
    println(type(file_name_or_path))

        if type(file_name_or_path) == "str" :
            let file = java_call("java.nio.file.Path","of",file_name_or_path)
        else:
            let file = file_name_or_path
        java_call("java.nio.file.Files","readAllLines",file)
    }
}

class path {
    fn `of`(file_name,[rest]){
        java_call_vararg("java.nio.file.Path","of",file_name,rest)
    }
}
----

=== `keys`

The function `keys()` returns a string list containing the keys of the argument.

* If it is a class, then the keys are the class level fields, including those that have closure value, hence are class methods.

* If it is an object, then the list contains the fields.

* If it is a macro, a closure, or a function then it will return the parameter names.

=== `len`

This function returns the length of the argument.
The argument can be:

* string

* list

* Java array

* Java collection

=== `rng`

Returns a number range.

[source]
----
rng(start, end, step)
----


It is a read-only list that contains all the numbers from the start (inclusive) to the end (exclusive) with the given step.
It does not create an actual list but just provides access to the numbers of the range by index.
You can also iterate through the elements.

The next example demonstrates that you can have extremely large ranges.

{%S rng%}

If you want a physical list with the elements, you can create it using the `..` spread operator:

{%S rngThousand%}

In this case `array` will be a list that contains the elements that we print out.
Do not try this with too large numbers unless you want to test out of memory errors.

You can index a number range, and you can also use a range to index another range:

{%S rngRange%}

In this case you index the range and do not spread it into a list.
We only spread the new range for the printout.
The range called `range` does not allocate the almost two-million elements.
It is simply another number range.
At the end the code allocates a list of ten elements for the printout.

The third parameter `step` is optional.
If not specified it will be `+1` or `-1` depending on the start and the end value.

If specified, it must not be zero, and it has to be positive or negative based on the relations between the start and end value.
Essentially, stepping has to approach the end value.

{%S rngErrs%}

It is recommended not to use the `rng()` function directly.
You can import the system module `range` that defines a more flexible name:

{%S rangeThousand%}


=== `set`

Set the value of a variable in the local context.
This function is useful for meta-programming when the name of the variable is available in a string.
An example is in the sample:

{%S fnDecorator3%}

uses this function to decorate a function and then set the variable of the same name, overwriting the definition with a new, decorated closure.

=== `set_global`

It is simlar to `set()` but it sets the variable as global.

=== `type`

This method returns the type of the argument as a string.

{%S type1%}

When the argument is a Java object then the type is `java.` + the canonical name of the class.

=== `is_type`

This function accepts two arguments:

* and object, and
* a string naming a class or the class itself.

The return value is true if the object is an instance of the class or is an instance of a child class of the named class.

{%S is_type%}

=== `parents`

Returns a list of the classes that are the parent classes of the argument.

{%S parents%}

=== `all_parents`

Returns a list of classes that are the parent classes of the argument with a transitive closure.
It means that all classes, including the parents of the parents and so on, recursively.

{%S all_parents%}

The classes are ordered in inheritance order.

=== `sleep`

Will sleep the execution of the thread for the given number of seconds.

{%S sleep%}

=== `macro`

This function converts a closure or a function into a macro.

{%S macro_example%}

=== `reclose`

This function will "open" and relose a closure in the current environment.

{%S reclose%}

The function opens and "recloses" the closure in the context of the function call.
It will see and alter the `s` in that context of the re-closing, while the original closure alters and sees the global `s`.

=== `print`, `println`

Prints the arguments to the standard output.
`println` also prints a new-line at the end.

=== `que`

This function will create a FIFO queue that different code fragments can write and read.
These fragments will probably run in different threads.

Here is a complex example using this function:

{%S que%}


=== `die`

This function will throw an exception.
The argument is the message of the exception.
The naming of the function is a tribute to the programming language Perl.
If you feel the naming offensive, you can use the lame `throw` form after importing it:

{%S die%}


=== `yield()`, `try_yield()`, `yield_is_close()`

In an asynchronous thread you can get objects sent by the parent thread calling `yield()`.
This call will wait for an object and return it.
If the que from the parent thread is already closed, then `yield()` will throw an exception.

`try_yield()` is more lenient.
It does not wait and returns `none` if there is no message or the channel is closed.

`yield_is_close()` can be used to test of the que is open from the parent to the child thread.

{%S try_yield%}

=== Regular Expressions

Regular expression handling is implemented with two primitive functions `pass:[_rx()]` and `pass:[_rx_match()]`.
They start with the `pass:[_]` character to signal that they are not to be used directly.
Instead, the code has to import the system file `re`:

{%S re%}

You can create a regular expression object using `Re()`.
It has two methods:

* `match()` to match the whole string passed as argument, and

* `find()` to find a matching strign in the string.

If there is no match, the return value is an empty object.
If there is a match, then the return value is an object containing the matching groups.

Even if there are no matching groups the object is not empty as it will have an empty list field named `group`.

YOu can also use named arguments, that will get into the field `name`.
In the example above that field was empty.
In the following example we have named arguments:

{%S re2%}

Each named argument contains the start, end, and the index of the named group.

=== `is_defined`

This macro accepts an identifier and returns `true` if the identifier is defined in the current context.

{%S is_defined%}

=== `unlet`

Unlet is a macro that accepts one identifier and deletes it from the local context.
It is an error if the variable is not defined in the local context or defined but not in the local context.

This macro was designed for a special purpose to, to create an initializer that can copy the values of an initializer class. Fo example:

{%S unlet%}

Without the call to `unlet` the class would also have the variable `obj` as a field.

=== `is_obj`

This is a function that returns `true` if the argument is an object.

=== Elephant functions: `thunk`, `unthunk`, `unwrap`, `block_list`

The `thunk` macro returns its argument unevaluated, preserving it as a command or expression.
This deferred computation can later be executed using `unthunk`.

`unthunk` evaluates the stored command in the **context where `unthunk` is called**, not the context where the thunk was created.

.difference from `evaluate`
[NOTE]
====
Although `evaluate` provides similar functionality, it differs in two key ways:

- `evaluate` can only be used **inside a macro**.

- It evaluates the argument in the **caller’s context**, i.e., the context of the macro's caller.
====

Note also that the argument to `thunk` can only be an expression and not an arbitrary command.
That is a restriction that comes from Turicum syntax.
However, you can enclose any command into a block, and then you can use the block as an expression or part of an expression.

When you `unthunk` a block it will be evaluated in a local context freshly created for the block execution.
Although this context wraps the surrounding context, but defined local variables will not be visible after the execution of the block.
To overcome this limitation and execute the commands like they were literally written where the `unthunk` call is made you can `unwrap` a block.

.block wrapping explanation
[NOTE]
====
A block can be wrapping and non-wrapping.
Most of the blocks in Turicum are wrapping.
When you execute a wrapping block, the execution starts in a new context.
This context wraps the surrounding context, thus the code can access and modify the variables defined there, but any locally defined variable will only be available in the block and will disappear when the block is finished and the context is not used anymore.

A non-wrapping block executes in the surrounding context.
Any variable defined in the block will also be available outside.
An example of a non-wrapping block is an object initializer.
The body of the `init` method is executed in the surrounding context.
This is the object context in this case.
Any local variable defined in the `init` method becomes a field.

`unwrap` should get a block command as argument, probably as the result of a `thunk` call and it will result in a copy of the block, unwrapping.
====

The following example shows how these functions work.

{%S thunk_unthunk%}

The function `block_list` will return a list containing the commands in a command block.
The following example shows you how it can be used together with `thunk` and `unthunk`.

{%S block_list%}
== Preprocessing

When the syntax analyzer meets a `#` symbol it stops parsing the tokens and starts preprocessing.
The steps of the preprocessing are the following:

. Parse the command following the `#` symbol.
This is the preprocessor command.
It has to be a macro, a function, or a closure.

. Remove all the tokens from the token list that were already processed.

. Create a preprocessor context.

. Execute the commands that were parsed.
This will create global variables, functions, and classes in the preprocessor context.

. Execute the command passing the list of tokens as the only argument.

. Remove all the tokens from the input and replace them with the token list returned by the preprocessor.

. If there are elements that are not tokens originating from the original list, parse them and convert each to a list of tokens.

When the remaining code is executed, the interpreter will use the preprocessor context.
If there is more than one preprocessor executed, they will share the same context.

The following example shows preprocessing that adds lines defining a global variable `M`,
defines a function, and
sets the value of the variable `M` to `"hello hello"`.

{%S preprocessorSample%}

The example above is quite contrived.
Preprocessors are usually defined in imported files and invoked using a simple function call.

== Language Grammar (Appendix)

=== Full Annotated EBNF

The following is the non-standard EBNF definition of the programming language called Turicum.
Strings between ' characters are literal keywords.
Syntax between `[` and `]` are optional
Syntax between `{` and `}` are repeated zero or more times
Syntax between `(` and `)` is a group with alternatives
Alternative syntaxes are separated using the `|` character.
Non-terminal symbols are all capital letters.
EBNF non-terminals are followed by `::=` and then the definition closed by `;`
Non-literal terminal symbols are:

* IDENTIFIER
* number
* string

A program is a series of commands.
Commands may be separated by `;` character, and it is recommended to use it, but it is not required.
New line may replace the use of `;`.

 PROGRAM ::= { COMMAND [;] } ;

Commands also have values. It is the __result__ of the command.

 COMMAND ::=  IF |
              LOOP |
              CLASS |
              FN |
              LOCAL | GLOBAL | PIN
              BREAK | YIELD | RETURN |
              TRY |
              ASSIGNMENT |
              EXPRESSION |
              ;

 LOOP ::= ('while' [EXPRESSION] ['list']( BLOCK | ':' COMMAND ) |
           'for' COMMAND ';' [EXPRESSION] ';' COMMAND ['list']( BLOCK | ':' COMMAND ) |
           'for' '(' COMMAND [EXPRESSION] COMMAND ')' ['list'](  BLOCK | ':' COMMAND )  |
           'for each' identifier [with identifier] 'in' EXPRESSION ['list']( BLOCK | ':' COMMAND ) |
           'for each' '(' identifier ['with' identifier] 'in' EXPRESSION ')' ['list'](  BLOCK | ':' COMMAND )
          ) [ 'until' EXPRESSION]
 ;

If the condition expression is missing after 'for' or 'while' it is `true`.
The expression following the 'until' keyword is not optional, but the whole `until` `EXPRESSION` part is.
The value of a loop is the last __executed__ command.
Equivalent to: `for(init; condition; step)`

The value of an `IF` command is the value of the first or the second block, whichever is executed.
If the condition expression is false and there is no second block, then the value is `none`.

 IF ::= 'if' EXPRESSION ( ':' COMMAND | BLOCK ) [ 'else' ( ':' COMMAND | BLOCK )] ;

The result of a CLASS declaration is the class itself.

 CLASS ::= 'class' [IDENTIFIER] [ ':' IDENTIFIER_LIST ] BLOCK ;

The result of a function declaration is the function itself.

 FN ::= FN_EXPR | FN_BLOCK ;

For functions with an expression body following a '=' the parameter list is mandatory.
The parameter list may be empty having only '(' and ')'

 FN_EXPR   ::= 'fn' [ IDENTIFIER ] '(' IDENTIFIER_LIST ')' '=' EXPRESSION ;

For functions with a block body, both the function name and parameter list are optional, but you must have at least one of them.

 FN_BLOCK  ::= 'fn' [ IDENTIFIER ] [ '(' IDENTIFIER_LIST ')' ] BLOCK ;

Variables declared as local will be local to the scope, even if the same name is used in some enclosing scope
or as a global variable
the value of the local declaration is the value of the last assignment in the command

 LOCAL ::= 'let' IDENTIFIER_ASSIGNMENT_LIST |
           'let' '{' TYPED_IDENTIFIER_LIST '}' '=' EXPRESSION|
           'let' '[' TYPED_IDENTIFIER_LIST ']' '=' EXPRESSION ;

Variables declared global will refer to the global variable.
The value of the global declaration is the value of the last assignment in the command.

 GLOBAL ::= 'global' IDENTIFIER_ASSIGNMENT_LIST;

Variables pinned cannot be changed in the local scope.
Pinning has no effect to outer scopes.
You can also pin an object. In that case use `{variable}` instead of the name.

 PIN ::= 'pin' IDENTIFIER_ASSIGNMENT_LIST;

 IDENTIFIER_ASSIGNMENT_LIST ::= [identifier [: TYPE_DEFINITION ] ['=' expression]]
                                    { ',' identifier [: TYPE_DEFINITION ] [ '=' expression] };

 TYPED_IDENTIFIER_LIST ::= identifier [: TYPE_DEFINITION ]
                                    { ',' identifier [: TYPE_DEFINITION ] };

 TYPE_DEFINITION ::= TYPE_NAME { '|' TYPE_NAME }

 TYPE_NAME ::= IDENTIFIER

It is valid to have no identifiers in an identifier list, a.k.a. having an empty identifier list

 IDENTIFIER_LIST ::= [ IDENTIFIER { ',' IDENTIFIER } ];

Using '=' updates a variable but never creates a new one. It first has to be created using `let`.

 ASSIGNMENT ::= LEFT_VALUE '=' EXPRESSION ;
 LEFT_VALUE ::= IDENTIFIER { '.' IDENTIFIER | '[' EXPRESSION ']'};
 EXPRESSION ::= BINARY_EXPRESSION[0];

Define precedence levels using indexed rules

 N=10;
 BINARY_EXPRESSION[i <N ] ::= BINARY_EXPRESSION[i+1] { BINARY_OPERATOR[i] BINARY_EXPRESSION[i+1] };
 BINARY_EXPRESSION[i == N] ::= UNARY_EXPRESSION  ;// Highest precedence level

Unary operators and primary expressions

 UNARY_EXPRESSION ::= PREFIX_UNARY_OPERATOR UNARY_EXPRESSION | PRIMARY_EXPRESSION;

 PRIMARY_EXPRESSION ::= number | string
 | FN
 | CLASS
 | IDENTIFIER
 | '(' EXPRESSION ')'
 | FUNCTION_CALL
 | FIELD_ACCESS
 | METHOD_CALL
 | BLOCK
 | ARRAY_ACCESS
 ;

Function call: name(params)

 FUNCTION_CALL ::= IDENTIFIER '(' [ EXPRESSION { ',' EXPRESSION } ] ')' ;

Field access: obj.field

 FIELD_ACCESS ::= PRIMARY_EXPRESSION '.' IDENTIFIER ;

Method call: obj.method(params)

 METHOD_CALL ::= PRIMARY_EXPRESSION '.' IDENTIFIER '(' [ EXPRESSION { ',' EXPRESSION } ] ')' ;

Block returning an expression value. The value of the block is always the last executed expression.

 BLOCK ::= '{' { COMMAND [';'] } '}' ;

 BREAK  ::= 'break' CONDITIONAL_VALUE ;
 RETURN  ::= 'return' CONDITIONAL_VALUE ;
 YIELD ::= 'yield' CONDITIONAL_VALUE ;
 CONDITIONAL_VALUE = EXPRESSION [ ('if' | 'when') EXPRESSION ];

Array element access: array[index]

 ARRAY_ACCESS ::= PRIMARY_EXPRESSION '[' EXPRESSION ']' ;

Unary operators

 PREFIX_UNARY_OPERATOR ::= '+' | '-' | '!' ;

Binary operators grouped by precedence (higher index = higher precedence)

 BINARY_OPERATOR[0] ::= '||' ; Lowest precedence
 BINARY_OPERATOR[1] ::= '&&' ;
 BINARY_OPERATOR[2] ::= '|' ;
 BINARY_OPERATOR[3] ::= '^' ;
 BINARY_OPERATOR[4] ::= '&' ;
 BINARY_OPERATOR[5] ::= '==' | '!=' ;
 BINARY_OPERATOR[6] ::= '<' | '<=' | '>' | '>=' ;
 BINARY_OPERATOR[7] ::= '<<' | '>>' ;
 BINARY_OPERATOR[8] ::= '+' | '-' ;
 BINARY_OPERATOR[9] ::= '*' | '/' | '%' ; Highest precedence for binary ops


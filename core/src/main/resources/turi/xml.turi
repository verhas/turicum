fn to_xml(object, @top, @plurals= {}) : str {
    fn to_singular(s : str, plurals : obj) : str {
        return plurals[s] if plurals[s] != none;
        if len(s) >= 3 && s[len(s)-3..inf] == "ies" {
            s[0..-3] + "y"
        }else{
            s[0..-1];
        }
    }

    return  "<%s>%s</%s>" % [top,object,top] if !is_obj(object);
    mut XML = "<%s" % [top];
    for each tag in keys(object){
        if tag[0] == "@" : XML = XML + " " + tag[1..inf] + "=\"" + object[tag] + "\"";
    }
    XML = XML + ">";
    for each tag in keys(object){
        if tag[0] != "@" && tag != "this" && tag != "cls" && object[tag] != none {
            {
            break {
                XML = XML + "<%s>" % [tag];
                for each item in object[tag] {
                    XML = XML + me(item,top=to_singular(tag,plurals),plurals=plurals);
                }
                XML = XML + "</%s>" % [tag];
            } if type(object[tag]) == "lst";

            break { XML = XML + me(object[tag], top=tag, plurals=plurals) } if is_obj(object[tag]);

            break { XML = XML + "<%s/>" % [ tag ] } if len(""+object[tag]) == 0;

            XML = XML + "<%s>%s</%s>" % [ tag , object[tag], tag ]
            }
        }
    }
    XML + "</%s>" % [top];
}

export to_xml;
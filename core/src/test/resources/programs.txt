// = for_loop_return

fn a(x:num) : bool {

    for i = 0 ; i < 3 ; i = i + 1{
        if i == x {
            return false
        }
    }
    return true
}

println a(2)


// = expression
if true : (mut k = 1; mut p = 3;) else: (mut k=2 ; mut p = 7;)
println k,p

// = try1
mut z = {
    try : k = 3 // undefined variable
    catch: ;
}

if z != none : die "z has value " % z

// = try2
// when there is an error the local variables are not changed
// if there is no error the local variables are defined in the surrounding context

mut a = 1

try:
    mut [b,c,d] = {
        mut b = 13;
        mut c = 55;
        mut D = 63;
        k = 1/ 0;
        [b,c,D]
    }
catch:;
die "b" if is_defined(b)
die "c" if is_defined(c)
die "d" if is_defined(d)
die "D" if is_defined(D)

try:
    mut [b,c,d] = {
        mut b = 13;
        mut c = 55;
        mut D = 63;
        [b,c,D]
    }
catch:;
die "!b" if ! is_defined(b)
die "!c" if ! is_defined(c)
die "!d" if ! is_defined(d)
// D is still not defined
die "D" if is_defined(D)



// = parents
// Tests how classes and parents are defined
class A {}
class B : A {}
class C : B {}
mut K = class {}
class D : A,C, K {}
if ""+parents(D) != "[class A, class C, class #undefined]" : die "wrong parents list";
if ""+all_parents(D) != "[class A, class C, class B, class #undefined]" : die "wrong all parents list %s != %s" % [all_parents(D),none];

// = EmptyBlockIsObject

mut a = {}
a.field

// = singleLineComments

try: null catch err {}// is undefined so it is null in the Java world

// = noneSymbol

∅

// = multiLineComment

/*
 * A variable that is not defined is null, and it is like that in the Java caller
 */
try: null catch err {}

// = multiLineNestedComment

/*
 * A variable that is not defined is null, and it is like that in the Java caller
 *  /* comments can also be nested inside of each other */
 */
try: null catch err {}

// = sample1


1 + 41

// = sample2


1 + 41

// = basicCommands


mut h = []
h[3].b = []
h[3].b[2] = 5
mut z = h[3].b[2]
mut a = {}
a.x = 10; mut c = 30; mut b = []; b[c] = 20; a.x + b[30] + c


// = testArithmeticOperations


mut x = 100;
mut y = 50;
mut z = x - y * 2;
z;

// = testFieldAccess


mut arr =  {}
, z = {}
arr.h = 42;
z["field"] = "suss"
z.field + ({arr}.h + arr["h"]);


// = testArrayAccess


mut arr = []
arr[3] = 42;
mut z = {}
z["field"] = "suss"
z.field + {arr}[3] * 2;

// = testNestedArrayAccess


mut arr = []
arr[3][2] = 42;
arr[3][2] * 2;

// = testMultipleAssignments


mut obj = {}
obj.a = 5;
obj.b = obj.a * 3;
mut arr = []
arr[1] = obj.b + 2;
arr[1];

// = testComplexExpressions


mut x = {}
x.val = 10;
mut y = []
y[{7}] = 5;
mut z = 2;
mut result = (x.val + y[7]) * z;
result;

// = testFloatingPointOperations
// Double

mut x = 10.5;
mut y = 3.25;
mut z = x * y + 2.5;
z / 2;

// = testIfStatement1


mut x = 10;
mut result = {
    if x > 5 {
        x * 2;
    } else {
        x / 2;
    }
}
result;

// = testIfStatement2
// Double

mut x = 3;
mut result = {if x > 5 {
    x * 2;
} else {
    x / 2;
}}
result;

// = testExportAssignment1


mut x = 10;
{ mut z = 1 ; export z}
{ if none != {try: z catch: none }{"not ok"} else {"ok"} }

// = testExportAssignment2


mut x = 10;
mut z = 7;
{ z = 2 }
x * z;

// = testExportAssignment3


mut x = 10;
mut z = 7;
{{{{{{ z = 2 }}}}}}
x * z;

// = testGlobalDeclaration


mut x = 10;
mut z = 7;
mut h = 6;
{ global x,z,h }
5;

// = testFunctionDeclaration

fn function x2, z, h {
} none; //anything undefined is error, none is null

// = testFinalDeclaration1


mut a=1, b=2;
pin a, b;
a*b;

// ! testFinalDeclaration2
pin a=1, b=2;
mut a = 3;

// ! EmptyParentList
class z : {}

// = testQuotedIdentifier1


mut `a`=1, `pin`=2
pin `a`, `pin`;
a*`pin`;

// = testQuotedIdentifier2


mut a=1, `this is a\\nmulti-line identifier`=2;
pin a, `this is a\\nmulti-line identifier`;
a *`this is a\\nmulti-line identifier`;

// = testCallingFunction1


fn f a,b,c {
    a + b + c
}
f(1,1,1);

// = testCallingFunction2


mut f = fn(a,b,c) {
    a + b + c
}
f(1,1,1);

// = testCallingFunction3


mut f = {}
f.k = fn z(a,b,c) {
    a + b + c
}
f.k(1,1,1);

// = testClassDeclaration


class meClass {
    global some = "it works";
    mut other = "local";
    fn a {1}
    fn b {2}
}
global some = "it works";
some + meClass.a() + meClass.b();

// = testClassInstanceCreation


class meClass {
    fn a {1}
    fn b {2}
}
mut object = meClass();
object.a() + object.b();

// = testClassInheritance


class Parent {
    fn a {1}
}
class meClass : Parent {
    fn b {2}
}
mut object = meClass();
object.a() + object.b();

// = testMultipleInheritance


class P1 {
 fn p1 {1}
}
class P2 : P1 {
 fn p2 {2}
}
class P3 {
    fn p3 {3}
}
class P4 : P3, P2 {
    fn p4 {4}
}
mut object = P4();
"" + object.p1() + object.p2() + object.p3() + object.p4();

// = testinitInheritance


class P1 {
 fn p1 {this.a}
}
class P2 : P1 {
 fn p2 {b}
}
class P3 {
    fn p3 {this.c}
}
class P4 : P3, P2 {
    fn init(a,b,c){}
    fn p4 {
        a =4;
        p1()
    }
}
mut object = P4(1,2,3);
"" + object.p1() + object.p2() + object.p3() + object.p4();

// = testMethodInheritance


class Parent {
 fn parent {1}
}
class Child : Parent {
 fn child { parent() }
}
mut child = Child();
child.child();

// ! testThisIsFinal
class Class {
 fn fun {
   this = 55
  }
}
`class` = Class();
`class`.fun();

// = testPipeOperator1


mut a = 1
mut b = a or 2

// = testOROperator2


mut a = 1
mut b = none
or 2

// = testClassExtension


class Class {}
Class.z = fn () {
  3
}
Class().z();

// = classDefinedWithAssignment


global msg = ""
mut PrinterClass = class {
  mut `print` = fn (message){
    global msg;
    msg = msg + message
    }
}
pin PrinterClass
mut p = PrinterClass()
p.`print`("csaka haha ")
p.`print`("fogorvos hihi ")
p.`print`("segithet huhu")

// = ifNoBlock


if 1: 1 else: 2

// ! constantTrue
mut true = 0

// ! constantFalse
mut false = 0

// ! constantNone
mut none = 0

// = looping1


/*
 while loop condition and body is executed in a local loop environment
*/
mut i = 1
while i < 10 : i = i + 1

// = looping2


mut i = 1
mut z
while i < 10 { i = i + 1;
  z = i}
z

// = looping3


global i = 1
fn inci {
  global i
  i =  i + 1
}
mut z
while i < 10 : z = inci()
z

// = looping4


/*

here we define a function that increments the loop variable, which is a global variable.
Even the loop body is not enclosed between '{' and '}' it is executed in a new local environment

 */
global i = 1
fn inci {
  global i
  i =  i + 1
}
global z = 0
while i < 10 : global z = inci()
z

// = looping5


mut i = 1
while i < 10 { i = i + 1 } until i == 9;;;;

// = looping6


mut i = 1
while( i < 10 ) : i = i + 1 ; until i == 9;;;;

// = forLoop1


mut z = 0

for i=1 ; i<10 ; i=i+1 : z=i

z

// = forLoop2


mut z = 0
for mut i=1 ; i<10 ; i=i+1 : z=i
z

// = forLoop3


mut z = 0
for( i=1 ; i<10 ; i=i+1 ): z=i
z

// = forLoop5


mut z = 0
for i=1 ; i<10 ; i=i+1 : z=i until i == 8
z

// = forLoop6


mut z = 0
for (i=1 ; i<10 ; i=i+1 ):  z=i
z

// = forLoop7


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you do not explicitly write it to be 'mut i ='...
for i=1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

// = forLoop8


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you can explicitly write it to be 'mut i ='... even with a type
for mut i : num =1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

// = forLoop9


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you can explicitly write it to be 'mut i ='... even with a type
for mut i : float  =1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

// = forLoop10


mut i = 0
mut msg : str = ""
// the loop variable is inherited in this case
for {i=1} ; i<10 ; i=i+1 :  msg = msg + i
msg + i

// = closure1


mut z = {| a,b,c | a+1 } ; z(2,3,4)

// = closure2


{| a,b,c | a+1 }(2,3,4)

// = closure3


mut z = {| a,b,c | a+1 } ; z(2,3,4)

// = boost


+{fn map(x) {
  x * 2
}}(1)

// = range
// Range

13..2

// = listLiteral1


[1,2,3][0]

// = listLiteral2


[1..3][1]

// = listLiteral3


mut a = [1..3];
[..a,7][1]

// = forEachLoop1


mut a = [1..4];
mut k = 0;
for each z in a : k = k + z


// = pinExample


"""
pin signals that a variable cannot be modified any more in the given scope.
It does not prevent code in enclosing scopes.
It also does not prevent any inner/enclosed scopes to use the variable as modifiable, however any modification will
be local to that level.
"""
mut i = 3; pin i; mut j = 3, s = 5, k = 0;
{
   s = s + 1;
   pin s;
   // you cannot do that, if 'i' is local then it is local
   // you cannot eat your cake and have it, not even if you are the UB
   // mut i = i + 4;
   k= i + 4
   j = j + 4;
}
s = s + 1;
""+i+" "+k+" "+j+" "+s
// fn reducer(acc,item)= acc+item
// { burst init_expression ; generator_expression ? filter → map ? filter ... >>= reducer with unit=expression}

// = minusOperatorSample


class A {
  fn init(zumba){}
  fn `+`(right) {
     if( right != none ) {
          A(this.zumba + right.zumba)
     } else {
          this
     }
  }
  mut `-` = macro({|right|
         if( right ≠ none ) {
              A(this.zumba - evaluate(right).zumba)
         } else {
              A(-this.zumba)
         }
     })
}
mut a = -A(1);
mut b = A(2);
(b-a).zumba

// = initAsFactory


class PrinterClass{
  fn init {
    this.msg = ""
  }
  mut `print` = fn (message){
    this.msg = this.msg + message
    }
}

class z{
    fn init {
      this = PrinterClass();
      this.msg = "Z says: "
    }
}
class y : PrinterClass {
    fn init {
      this.msg = "Y says: "
    }
}

mut p = PrinterClass()
p.`print`("csaka haha ")
p.`print`("fogorvos hihi ")
p.`print`("segithet huhu\n")
z = z()
z.`print`("csaka haha ")
z.`print`("fogorvos hihi ")
z.`print`("segithet huhu\n")
y = y()
y.`print`("csaka haha ")
y.`print`("fogorvos hihi ")
y.`print`("segithet huhu")

// = for_loop_context_pin

for i=0 ; i < 10 ; i = i + 1 {
    try: i = i +1
    catch: println "cannot change i from %s" % i
}

// = stringIndexing1


mut string = "zabraa"
string[1] = "e"
string[0..-1]

// = StringIndexing2


mut MESSAGE = "1234"
// you can replace part of the string in an assignment
// it can be longer than the part replaces, can be shorter, even empty
MESSAGE[1..3] = 775
MESSAGE

// = StringIndexing3


mut X = {}
X.MESSAGE = "1234"
X.MESSAGE[1..3] = 32
X.MESSAGE[-∞..2] // bad luck

// = reclosingClosure
mut MESSAGE = ""
mut z = 55;
mut y = 77;
mut x = {|| MESSAGE = MESSAGE + z + " "
        z = y;
    };
x(); // 55, z <- 77
{
  mut z = 63;
  x(); // 77
  MESSAGE = MESSAGE + z + " " // 77
  y = 99;
  reclose(x)(); // 63
  MESSAGE = MESSAGE + z + " " // 99
}
MESSAGE = MESSAGE + z + " ";
MESSAGE = MESSAGE[0…-1]

// = catchingException


mut MESSAGE = ""
try {
  mut h = nonexistent()
}catch exception {
  MESSAGE = exception.message
}
MESSAGE

// = DeclareType



mut a : any|str = "alma ata"

// = badType


mut ex;
try {
    mut a: str = 13
    }catch exception: ex = exception
"" + ex

// = fnPositionalOnly

fn f(!a, !b, !c) { }
none

// = fnPositionalAndOptional

fn f(a, b = 2, c = 3) { }
none

// = fnNamedOnly

fn f(@a = 1, @b = 2) { }
none

// = fnMixedParams

fn f(!a, b, c = 3, @d = 4) { }
none

// = fnWithRestParam

fn f(a, [args]) { }
none

// = fnWithMetaParam

fn f(a, {kwargs}) { }
none

// = fnWithClosureParam

fn f(a, ^block) { }
none

// = fnWithAllParamKinds

fn f(!a, b = 2, @x = 3, [rest], {meta}, ^closure) { }
none

// = fnClosureOnly

fn f(^callback) { }
none

// ! fnRestBeforeMeta
fn f({meta}, [rest]) { }

// = fnMetaBeforeClosure

fn f(@a = 1, {meta}, ^block) { }
none

// ! fnClosureNotLast
fn f(^block, a) { }

// ! fnDuplicateParamNames
fn f(a, a) { }

// ! fnDuplicateRestMetaClosure
fn f([x], [x]) { }

// = closureWithNamedOnly

mut f = {| @x=1, @y=(2|3) | }
none

// = closureWithAllParamKinds

mut f = {| !a, b = 2, @x = 3, [rest], {meta}, ^block| }
none

// ! closureRestAfterClosure
mut f = {| a, ^block, [rest] | }

// = namedArguments1


fn fun(@a:str, @b=2){
  a + b
}
fun(a="1")

// = namedArguments2


fn fun(@a:str, @b=2){
  a + b
}
fun(a="1",b=3)

// = namedArguments3


fn fun(@a:str, {meta}){
  a + meta["b"]
}
fun(a="1",b=3)

// = namedArguments4


fn fun(@a:str, [rest]){
  a + rest[0] + rest[1]
}
fun(a="1",3, 45)

// = namedArguments5


fn fun(@a:str, [rest],{meta}){
  a + rest[0] + rest[1] + meta.b
}
fun(a="1",3, 45, b="ka")

// = namedArguments6


fn fun(@a:str, [rest],{meta},^closurea){
  closurea(a , rest[0] , rest[1] , meta.b)
}
fun(a="1",3, 45, b="ka",{|a,b,c,d| ""+ d + c + b + a })

// = closureArgument1


fn fun(@a:str, [rest],{meta},^closurea){
  closurea(a , rest[0] , rest[1] , meta.b)
}
fun(a="1",3, 45, b="ka"){|a,b,c,d| ""+ d + c + b + a }

// = closureArgument2


fn fun(@a:bool, [rest],{meta},^closurea){
  if a :
    closurea(a , rest[0] , rest[1] , meta.b)
  else:
    ""+rest[0] + rest[1] + meta.b
}
mut x = fun(a=true,3, 45, b="ka"){|a,b,c,d| ""+ d + c + b }
mut klos = {|a,b,c,d| ""+ d + c + b }
mut y = fun(a=false,3, 45, b="ka", klos)
x + y
// = positionalOnly1


fn fun(!a, b){
  "" + a + b
}
fun(1, 3)

// = positionalOptional1


fn fun(a, b="default"){
  "" + a + b
}
fun(1)

// ! positionalDefaultSkipped
fn fun(!a, b=2, c=3){
  "" + a + b + c
}
fun(1, , 4) // skipping b isn't allowed

// = mixedPositionalNamed
fn fun(!a, @b){
  "" + a + b
}
fun(1, b=3)

// = namedWithDefaultSkipped
fn fun(@a, @b="default"){
  "" + a + b
}
fun(a="1")

// = shadowingInMeta


fn fun(!a, {meta}){
  meta.a
}
fun("real", a="metaValue")

// = restAndMetaOverlap


fn fun([rest], {meta}){
  "" + rest[0] + rest[1] + meta["b"]
}
fun(4,5,b="ka")

// ! invalidTypeInNamed
fn fun(@a:num){
  a + 1
}
fun(a="stringValue")

// ! closureAsNamedNotCallable
fn fun(@a:str, ^cb){
  cb()
}
fun(a="val", cb="notAFunction")

// ! multipleCallablesTrailing
fn fun(@a, ^cb){
  cb() // too few arguments
}
fun(a="hi") {|a| a }

// = closureInlineWithMeta


fn fun(@a, {meta}, ^cb){
  cb(a, meta.x)
}
fun(a="META", x=3) {|a,b| "" + a + b }

// = preprocessorSample


fn adhoc(){ // this will be deleted, it only exists in the preprocessor context
  "huhu "
}
# {|lexes|
["""
    mut M:str = ""
    fn adhic(){
      "hihi "
    }
    M = M + "hello ";
    M = M + (adhoc() or "none ");
""",..lexes]
}
M = M + adhic() + "hangyavadasz"

// = jsonLazyObject


mut z = &{
a : k, b : (println("hubabba"))
}
mut M = ""
mut k = 1
M = M + z.a
k = 2
M = M + z.a

// = defineEquals



class A {
  fn `==`(other){
    this.a == other.a
  }
}

mut x = A()
mut y = A()
mut z = {}

x.a = 1
x.b = "x"

y.a = 1
y.b = "y"

z.a = 1
z.b = "z"

""+ (x == y) + (y == z)

// = pinObject

mut a = {x:1,y:2};
pin {a}
mut hu = { try {
    a.x = 3
    print("huhh")
}catch e {
    break 55
}};

hu

// = typeExpression


mut a :("str") = "kuka"

// = async

fn generator a=0, b=10 {
    for( i = a; i < b; i = i + 1 ) {
        println("sleeping")
        sleep(0.1);
        yield i;
        }
    }
fn future {
  global mikka_makka
  "abraka dabra " + mikka_makka
}
mut a = 1
mut b = 3
mut k = [ .. {async {mut a = 7, b = 9 ;generator(a,b);}},keys()]
println("The value of a is ", a);
println(k)
global mikka_makka = "Maminti"
mut f = async {mut a=5;future()}
println(await f)

// = streaming


fn gen_1_to_10 {
    for i=1 ; i <= 10 ; i = i + 1:
        yield i;
    return 1000
}

mut st = async gen_1_to_10();
println( st );
while st.has_next() :
    println(st.next());
await[10000] st

// = fibonacci


    fn k(x){
        if x == 1 || x ==  0 : 1
        else: k(x-1)+k(x-2)
    }


k(10)
// = localFibonacci


{
    fn k(x){
        if x == 1 || x ==  0 : 1
        else: me(x-1) + me(x-2)
    }
k(10)
}

// = argumentSpreading


fn a(@a,@b,@c,@d){
    "%s %s %s %s " % [a,b,c,d]
}
fn b(!a,!b,!c,!d){
    "%s %s %s %s " % [a,b,c,d]
}

a(..{a:1,b:2,c:3,d:4}) + b(..[1,2,3,4])

// = typeRdefinition

class K {fn p(){println "original K" }}
fn h():K = K()
mut t:fn = {
   mut _K = K;
   {|| _K()}
}
class K {fn p(){println "overwritten K" }}
h().p()
t().p()

none
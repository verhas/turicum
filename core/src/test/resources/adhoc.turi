{
    fn a(a,y,c){
        return  a + y + evaluate(c)
    }
    fn b(x){
        return 2*x
    }

    let c = a##b;

    die if 12 != macro(c.(1,2))(3)

}
{
    fn a(a,b,c){
        return  a+b+c
    }
    fn b(c){
        return 2*c
    }

    let c = a##b;

    die if c.(1,2)(3) != 12

}
{
    class A {
        fn init(k);
        fn a(x,y,z){
            return x + y + evaluate(z) + k
        }
    }

    let a = A(1)

    let b = macro(a.a.(1,1))
    die if b(1) != 4
}

{
    let a = macro(fn (x,y,z){
        return evaluate(x) + evaluate(y) + evaluate(z)
    })

    let b = a.(1)

    die "not 3" if b(1,1) != 3
}

{
    fn a(x,y,z){
        return x + y + z
    }

    let b = a.(1)

    die "not 3" if b(1,1) != 3
}

{
    fn a(x,y,z){
        return x + y + z
    }

    let b = a.(1).(1).(1)()
    die "not 3" if b != 3
}

{
    class A {
        fn init(k);
        fn a(x,y,z){
            return x + y + z + k
        }
    }

    let a1 = A(1)
    let a2 = A(2)

    let b1 = a1.a.()
    let b2 = a2.a.()

    die if b1(1,1,1) != 4
    die if b2(1,1,1) != 5
}

{
    class A {
        fn init(k);
        let a = macro(fn(x,y,z){
            return evaluate(x) + evaluate(y) + evaluate(z) + k
        })
    }

    let a1 = A(1)
    let a2 = A(2)

    let b1 = a1.a.()
    let b2 = a2.a.()

    die if b1(1,1,1) != 4
    die if b2(1,1,1) != 5
}
/*
sys_import "turi.duration"
sys_import "turi.http_client"

let GEMINI_API_KEY = env("GEMINI_API_KEY");

let body = {}

body.contents.parts[0].text = "Give me python code to sort a list.";

with http.post($"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}",
                 headers={
                     "User-Agent" : "Mozilla"
                 },
                 stream=true,
                 body=body

        ) as z {

        mut buffer:str = ""
        mut ch:str|none = ""
        mut brace_counter:num = 0
        println "starting the loop"
        while (ch=z.stream.read_char()) != none {
            buffer += ch;
            if ch == "{" : brace_counter++;
            if ch == "}" {
                brace_counter--;
                if brace_counter == 0 {
                    // buffer contains a JSON
                    // in Turicum if you execute a JSON it will result the object itself
                    let result = buffer.execute()
                    print result.response or (die "There was no response : \n"+ buffer)
                    // delete the JSON text just processed from the buffer
                    buffer = ""

                }
            }
        }
        println "done"
    }
*/
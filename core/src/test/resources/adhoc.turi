class B {
    fn $`.`(a,b,c) {
        println "hi",a,b,c
        println "this is ", if is_defined(this) : this
        println "cls is ",if is_defined(cls) : cls
        println "me is ",me
        println ". is ",`.`
        if a == 1 : me(2,3,4)
        //`.` = "me"
    }
}

let k = "b";
let $`${k}` = B()
b.pirka(1,2,3)



/*
sys_import "turi.duration"
sys_import "turi.http_client"

let GEMINI_API_KEY = env("GEMINI_API_KEY");

let body = {}

body.contents.parts[0].text = "Give me python code to sort a list.";

with http.post($"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}",
                 headers={
                     "User-Agent" : "Mozilla"
                 },
                 stream=true,
                 body=body

        ) as z {

        mut buffer:str = ""
        mut ch:str|none = ""
        mut brace_counter:num = 0
        println "starting the loop"
        while (ch=z.stream.read_char()) != none {
            buffer += ch;
            if ch == "{" : brace_counter++;
            if ch == "}" {
                brace_counter--;
                if brace_counter == 0 {
                    // buffer contains a JSON
                    // in Turicum if you execute a JSON it will result the object itself
                    let result = buffer.execute()
                    print result.response or (die "There was no response : \n"+ buffer)
                    // delete the JSON text just processed from the buffer
                    buffer = ""

                }
            }
        }
        println "done"
    }
*/
let z = [ 1,2,3]
class B {
    fn a {
        if is_defined(this) :
            println $"hello ${this}, ${cls}  ${it}";
        else :
            println $"hello ${none}, ${cls}  ${it}";
    }
}
let b = B()
let k = z << b;
let h = z << B;
b.Kukk = 2;
k.a();
println k.Kukk
println "Now with h"
h.a()
println h.Kukk

let w = k[1..3]
w.a()




/*
sys_import "turi.duration"
sys_import "turi.http_client"

let GEMINI_API_KEY = env("GEMINI_API_KEY");

let body = {}

body.contents.parts[0].text = "Give me python code to sort a list.";

with http.post($"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}",
                 headers={
                     "User-Agent" : "Mozilla"
                 },
                 stream=true,
                 body=body

        ) as z {

        mut buffer:str = ""
        mut ch:str|none = ""
        mut brace_counter:num = 0
        println "starting the loop"
        while (ch=z.stream.read_char()) != none {
            buffer += ch;
            if ch == "{" : brace_counter++;
            if ch == "}" {
                brace_counter--;
                if brace_counter == 0 {
                    // buffer contains a JSON
                    // in Turicum if you execute a JSON it will result the object itself
                    let result = buffer.execute()
                    print result.response or (die "There was no response : \n"+ buffer)
                    // delete the JSON text just processed from the buffer
                    buffer = ""

                }
            }
        }
        println "done"
    }
*/
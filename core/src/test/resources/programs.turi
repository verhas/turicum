-- TEST multi_let1
// a simple test that assigns values to listed variables
let [a,b,c] = [1,2,3]
die if a != 1
die if b != 2
die if c != 3
try {
    a = 3
}catch e: none;
die "reassigned" if a == 3

-- TEST multi_let2
// a simple test that assigns values to field-named variables
let {a,b,c} = { c: 3, "a":1, b:2}
die if a != 1
die if b != 2
die if c != 3
try {
    a = 3
}catch e: none;
die "reassigned" if a == 3

-- TEST multi_let3
// a simple test that assigns values to field-specified variables
let {ac->a, bc->b, cc->c} = { cc: 3, "ac":1, bc:2}
die if a != 1
die if b != 2
die if c != 3
try {
    a = 3
}catch e: none
die "reassigned" if a == 3

-- TEST multi_let4
// assign value to left value
let a = {}
mut { ac->a.a, bc->b, cc->c } = { cc: 3, "ac":1, bc:2}
die if a.a != 1
die if b != 2
die if c != 3
a.a = 3
die "reassigned" if a.a != 3

-- TEST multi_let5
mut a = 7
mut SENTINEL = none
try {
    let {ac->a, bc->b, cc->c} = {cc: 3, "ac":1, bc: 2 }
    SENTINEL = 1
}catch e: none
die if SENTINEL == none

-- TEST multi_let6
mut {cc->a, ac -> {b,c}} = {cc: 3, "ac": {b:1, c: 2 }}
die if a != 3
die if b != 1
die if c != 2

-- TEST multi_let7
mut {cc->a, ac -> { h -> [b,c]}} = {cc: 3, "ac": {h: [1, 2] }}
die if a != 3
die if b != 1
die if c != 2

-- TEST multi_let8
mut {cc->a, ac -> [ [b,c]]} = {cc: 3, "ac": [ [1, 2]] }
die if a != 3
die if b != 1
die if c != 2

-- TEST curry_chained_macro
    fn a(a,y,c){
        return  a + y + evaluate(c)
    }
    fn b(x){
        return 2*x
    }

    let c = a##b;

    die if 12 != macro(c.(1,2))(3)

-- TEST curry_chained_closure
    fn a(a,b,c){
        return  a+b+c
    }
    fn b(c){
        return 2*c
    }

    let c = a##b;

    die if c.(1,2)(3) != 12

-- TEST curry_macro_method
    class A {
        fn init(k);
        fn a(x,y,z){
            return x + y + evaluate(z) + k
        }
    }

    let a = A(1)

    let b = macro(a.a.(1,1))
    die if b(1) != 4

-- TEST curry_macro
let a = macro(fn (x,y,z){
    return evaluate(x) + evaluate(y) + evaluate(z)
})

let b = a.(1)

die "not 3" if b(1,1) != 3

-- TEST curry_function
fn a(x,y,z){
    return x + y + z
}

let b = a.(1)

die "not 3" if b(1,1) != 3

-- TEST curry_curry_curry
fn a(x,y,z){
    return x + y + z
}

let b = a.(1).(1).(1)()
die "not 3" if b != 3


-- TEST curry_method1
class A {
    fn init(k);
    fn a(x,y,z){
        return x + y + z + k
    }
}

let a1 = A(1)
let a2 = A(2)

let b1 = a1.a.()
let b2 = a2.a.()

die if b1(1,1,1) != 4
die if b2(1,1,1) != 5

-- TEST curry_method2
class A {
    fn init(k);
    let a = macro(fn(x,y,z){
        return evaluate(x) + evaluate(y) + evaluate(z) + k
    })
}

let a1 = A(1)
let a2 = A(2)

let b1 = a1.a.()
let b2 = a2.a.()

die if b1(1,1,1) != 4
die if b2(1,1,1) != 5

-- TEST signature1
fn f (a:num=53,[reliquum],{nominati},^clausura):any {
    return a + b + c
}

let s = signature(f)
die "wrong name" if s.name != "f"
die "number of return types is not one" if len(s.return_type) != 1
die "wrong return type" if s.return_type[0] != "any"
die "wrong rest name" if s.rest != "reliquum"
die "wrong meta name" if s.meta != "nominati"
die "wrong closure name" if s.closure != "clausura"
die "number of parameters is not one" if len(s.parameters) != 1
die "wrong parameter name" if s.parameters[0].identifier != "a"
die "wring default value type" if str(type(s.parameters[0].default)) != "java.ch.turic.commands.IntegerConstant"
die "wrong default value" if str(s.parameters[0].default) != "53"
die "not named" if ! s.parameters[0].named
die "not positional" if ! s.parameters[0].positional



-- TEST function_concat
fn f (a:num,!b:num|any=53,@c:num|none) {
    return a + b + c
}
fn g(x):num{
    return x+1
}
let z =  (f ## g)(1,1,c=1)
die if z != 4

-- TEST none_or_Object
let splt = str({none or "a,b,c"}.split(","))
die $"none or object resulted what? ${splt}" if splt != "[a, b, c]"

-- TEST for_loop_return

fn less_than_3(x:num):bool {
    for i = 0 ; i < 3 ; i++ {
        return false if i == x
    }
    // no need for explicit 'return'
    true
}

for each i in [1..3] :
    die $"for loop failure ${i}" if less_than_3(i)

for each i in [3..11] :
    die $"for loop failure ${i}" if !less_than_3(i)

-- TEST expression
// expressions can contain commands between ( and )
// these commands are executed in the surrounding context
// not in a new wrapped context
if true : (mut k = 1; mut p = 3;) else: (mut k=2 ; mut p = 7;)

// it means that 'k' and 'p' will be defined, while the line:
//      if true : {mut k = 1; mut p = 3;} else: {mut k=2 ; mut p = 7;}
// would defined them in a local context and then the value is not available anymore

die if !is_defined(k) || !is_defined(p)
die if k != 1
die if p != 3

-- TEST parents
// Tests how classes and parents are defined
class Grandfather {}
class Father : Grandfather {}
class Child : Father {}
mut Onkel = class {}
class UrKind : Grandfather ,Child, Onkel {}

die "wrong parents list" if ""+parents(UrKind) != "[class Grandfather, class Child, class #undefined]"

die "wrong all parents list %s != %s" % [all_parents(UrKind),none] if ""+all_parents(UrKind) != "[class Grandfather, class Child, class Father, class #undefined]"

-- TEST java_call

// you can invoke any Java method specifying the name of the class, and then the name of the method
// this way you can call static methods
fn sqrtt(x:float) = java_call("java.lang.Math","sqrt", x);
let k = ""+sqrtt(3.0)
die k if !k.starts_with("1.73205080756")

// now let's use it to create a time unit: nano seconds
let java_unit = java_call("java.time.temporal.ChronoUnit","valueOf", "NANOS")
die if type(java_unit) != "java.java.time.temporal.ChronoUnit"
// we can use that object, and create a 63ms duration
let duration = java_call("java.time.Duration","of",63_000_000,java_unit);

// you can use the same function to call a method on an object
// in this case the first argument is the object and not the name of the class
let fraction = java_call(duration,"dividedBy",10);
// you cannot call methods on a string that way... sorry.. but you have more than ample string methods in Turicum instead

die ""+fraction if ""+fraction != "PT0.0063S"

let f = java_call_vararg("java.lang.String","format", "an unlucky number is %s", [13])
die if f != "an unlucky number is 13"


-- TEST try1
mut z = {
    try : k = 3 // undefined variable
    catch: ;
}

if z != none : die "z has value " % z

-- TEST try2
// when there is an error the local variables are not changed
// if there is no error the local variables are defined in the surrounding context

mut a = 1

try:
    mut [b,c,d] = {
        mut b = 13;
        mut c = 55;
        mut D = 63;
        k = 1/ 0;
        [b,c,D]
    }
catch:;
die "b" if is_defined(b)
die "c" if is_defined(c)
die "d" if is_defined(d)
die "D" if is_defined(D)

try:
    mut [b,c,d] = {
        mut b = 13;
        mut c = 55;
        mut D = 63;
        [b,c,D]
    }
catch:;
die "!b" if ! is_defined(b)
die "!c" if ! is_defined(c)
die "!d" if ! is_defined(d)
// D is still not defined
die "D" if is_defined(D)

-- TEST EmptyBlockIsObject

mut a = {}
a.field

-- TEST singleLineComments

try: null catch err {}// is undefined so it is null in the Java world

-- TEST noneSymbol

âˆ…

-- TEST multiLineComment

/*
 * A variable that is not defined is null, and it is like that in the Java caller
 */
try: null catch err {}

-- TEST multiLineNestedComment

/*
 * A variable that is not defined is null, and it is like that in the Java caller
 *  /* comments can also be nested inside of each other */
 */
try: null catch err {}

-- TEST sample1


1 + 41

-- TEST sample2


1 + 41

-- TEST basicCommands


mut h = []
h[3].b = []
h[3].b[2] = 5
mut z = h[3].b[2]
mut a = {}
a.x = 10; mut c = 30; mut b = []; b[c] = 20; a.x + b[30] + c


-- TEST testArithmeticOperations


mut x = 100;
mut y = 50;
mut z = x - y * 2;
z;

-- TEST testFieldAccess


mut arr =  {}, z = {}
arr.h = 42;
z["field"] = "suss"
z.field + ({arr}.h + arr["h"]);


-- TEST testArrayAccess


mut arr = []
arr[3] = 42;
mut z = {}
z["field"] = "suss"
z.field + {arr}[3] * 2;

-- TEST testNestedArrayAccess


mut arr = []
arr[3][2] = 42;
arr[3][2] * 2;

-- TEST testMultipleAssignments


mut obj = {}
obj.a = 5;
obj.b = obj.a * 3;
mut arr = []
arr[1] = obj.b + 2;
arr[1];

-- TEST testComplexExpressions


mut x = {}
x.val = 10;
mut y = []
y[{7}] = 5;
mut z = 2;
mut result = (x.val + y[7]) * z;
result;

-- TEST testFloatingPointOperations
// Double

mut x = 10.5;
mut y = 3.25;
mut z = x * y + 2.5;
z / 2;

-- TEST testIfStatement1


mut x = 10;
mut result = {
    if x > 5 {
        x * 2;
    } else {
        x / 2;
    }
}
result;

-- TEST testIfStatement2
// Double

mut x = 3;
mut result = {if x > 5 {
    x * 2;
} else {
    x / 2;
}}
result;

-- TEST testExportAssignment1


mut x = 10;
{ mut z = 1 ; export z}
{ if none != {try: z catch: none }{"not ok"} else {"ok"} }

-- TEST testExportAssignment2


mut x = 10;
mut z = 7;
{ z = 2 }
x * z;

-- TEST testExportAssignment3


mut x = 10;
mut z = 7;
{{{{{{ z = 2 }}}}}}
x * z;

-- TEST testGlobalDeclaration


mut x = 10;
mut z = 7;
mut h = 6;
{ global x,z,h }
5;

-- TEST testFunctionDeclaration

fn function x2, z, h {
} none; //anything undefined is error, none is null

-- TEST testFinalDeclaration1


mut a=1, b=2;
pin a, b;
a*b;

-- TEST ! testFinalDeclaration2
pin a=1, b=2;
mut a = 3;

-- TEST ! EmptyParentList
class z : {}

-- TEST testQuotedIdentifier1


mut `a`=1, `pin`=2
pin `a`, `pin`;
a*`pin`;

-- TEST testQuotedIdentifier2


mut a=1, `this is a\\nmulti-line identifier`=2;
pin a, `this is a\\nmulti-line identifier`;
a *`this is a\\nmulti-line identifier`;

-- TEST testCallingFunction1


fn f a,b,c {
    a + b + c
}
f(1,1,1);

-- TEST testCallingFunction2


mut f = fn(a,b,c) {
    a + b + c
}
f(1,1,1);

-- TEST testCallingFunction3


mut f = {}
f.k = fn z(a,b,c) {
    a + b + c
}
f.k(1,1,1);

-- TEST testClassDeclaration


class meClass {
    global some = "it works";
    mut other = "local";
    fn a {1}
    fn b {2}
}
global some = "it works";
some + meClass.a() + meClass.b();

-- TEST testClassInstanceCreation


class meClass {
    fn a {1}
    fn b {2}
}
mut object = meClass();
object.a() + object.b();

-- TEST testClassInheritance


class Parent {
    fn a {1}
}
class meClass : Parent {
    fn b {2}
}
mut object = meClass();
object.a() + object.b();

-- TEST testMultipleInheritance


class P1 {
 fn p1 {1}
}
class P2 : P1 {
 fn p2 {2}
}
class P3 {
    fn p3 {3}
}
class P4 : P3, P2 {
    fn p4 {4}
}
mut object = P4();
"" + object.p1() + object.p2() + object.p3() + object.p4();

-- TEST testinitInheritance


class P1 {
 fn p1 {this.a}
}
class P2 : P1 {
 fn p2 {b}
}
class P3 {
    fn p3 {this.c}
}
class P4 : P3, P2 {
    fn init(a,b,c){}
    fn p4 {
        a =4;
        p1()
    }
}
mut object = P4(1,2,3);
"" + object.p1() + object.p2() + object.p3() + object.p4();

-- TEST testMethodInheritance


class Parent {
 fn parent {1}
}
class Child : Parent {
 fn child { parent() }
}
mut child = Child();
child.child();

-- TEST ! testThisIsFinal
class Class {
 fn fun {
   this = 55
  }
}
`class` = Class();
`class`.fun();

-- TEST testPipeOperator1


mut a = 1
mut b = a or 2

-- TEST testOROperator2


mut a = 1
mut b = none
or 2

-- TEST testClassExtension


class Class {}
Class.z = fn () {
  3
}
Class().z();

-- TEST classDefinedWithAssignment


global msg = ""
mut PrinterClass = class {
  mut `print` = fn (message){
    global msg;
    msg = msg + message
    }
}
pin PrinterClass
mut p = PrinterClass()
p.`print`("csaka haha ")
p.`print`("fogorvos hihi ")
p.`print`("segithet huhu")

-- TEST ifNoBlock


if 1: 1 else: 2

-- TEST ! constantTrue
mut true = 0

-- TEST ! constantFalse
mut false = 0

-- TEST ! constantNone
mut none = 0

-- TEST looping1


/*
 while loop condition and body is executed in a local loop environment
*/
mut i = 1
while i < 10 : i = i + 1

-- TEST looping2


mut i = 1
mut z
while i < 10 { i = i + 1;
  z = i}
z

-- TEST looping3


global i = 1
fn inci {
  global i
  i =  i + 1
}
mut z
while i < 10 : z = inci()
z

-- TEST looping4


/*

here we define a function that increments the loop variable, which is a global variable.
Even the loop body is not enclosed between '{' and '}' it is executed in a new local environment

 */
global i = 1
fn inci {
  global i
  i =  i + 1
}
global z = 0
while i < 10 : global z = inci()
z

-- TEST looping5


mut i = 1
while i < 10 { i = i + 1 } until i == 9;;;;

-- TEST looping6


mut i = 1
while( i < 10 ) : i = i + 1 ; until i == 9;;;;

-- TEST forLoop1


mut z = 0

for i=1 ; i<10 ; i=i+1 : z=i

z

-- TEST forLoop2


mut z = 0
for mut i=1 ; i<10 ; i=i+1 : z=i
z

-- TEST forLoop3


mut z = 0
for( i=1 ; i<10 ; i=i+1 ): z=i
z

-- TEST forLoop5


mut z = 0
for i=1 ; i<10 ; i=i+1 : z=i until i == 8
z

-- TEST forLoop6


mut z = 0
for (i=1 ; i<10 ; i=i+1 ):  z=i
z

-- TEST forLoop7


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you do not explicitly write it to be 'mut i ='...
for i=1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

-- TEST forLoop8


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you can explicitly write it to be 'mut i ='... even with a type
for mut i : num =1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

-- TEST forLoop9


mut i = 0
mut msg : str = ""
// the loop variable is local for the loop and
// you can explicitly write it to be 'mut i ='... even with a type
for mut i : float  =1 ; i<10 ; i=i+1 :  msg = msg + i
msg + i

-- TEST forLoop10


mut i = 0
mut msg : str = ""
// the loop variable is inherited in this case
for {i=1} ; i<10 ; i=i+1 :  msg = msg + i
msg + i

-- TEST closure1


mut z = {| a,b,c | a+1 } ; z(2,3,4)

-- TEST closure2


{| a,b,c | a+1 }(2,3,4)

-- TEST closure3


mut z = {| a,b,c | a+1 } ; z(2,3,4)

-- TEST boost


+{fn map(x) {
  x * 2
}}(1)

-- TEST range
// Range

13..2

-- TEST listLiteral1


[1,2,3][0]

-- TEST listLiteral2


[1..3][1]

-- TEST listLiteral3


mut a = [1..3];
[..a,7][1]

-- TEST forEachLoop1


mut a = [1..4];
mut k = 0;
for each z in a : k = k + z


-- TEST pinExample


"""
pin signals that a variable cannot be modified any more in the given scope.
It does not prevent code in enclosing scopes.
It also does not prevent any inner/enclosed scopes to use the variable as modifiable, however any modification will
be local to that level.
"""
mut i = 3; pin i; mut j = 3, s = 5, k = 0;
{
   s = s + 1;
   pin s;
   // you cannot do that, if 'i' is local then it is local
   // you cannot eat your cake and have it, not even if you are the UB
   // mut i = i + 4;
   k= i + 4
   j = j + 4;
}
s = s + 1;
""+i+" "+k+" "+j+" "+s
// fn reducer(acc,item)= acc+item
// { burst init_expression ; generator_expression ? filter â†’ map ? filter ... >>= reducer with unit=expression}

-- TEST minusOperatorSample


class A {
  fn init(zumba){}
  fn `+`(right) {
     if( right != none ) {
          A(this.zumba + right.zumba)
     } else {
          this
     }
  }
  mut `-` = macro({|right|
         if( right â‰  none ) {
              A(this.zumba - evaluate(right).zumba)
         } else {
              A(-this.zumba)
         }
     })
}
mut a = -A(1);
mut b = A(2);
(b-a).zumba

-- TEST initAsFactory


class PrinterClass{
  fn init {
    this.msg = ""
  }
  mut `print` = fn (message){
    this.msg = this.msg + message
    }
}

class z{
    fn init {
      this = PrinterClass();
      this.msg = "Z says: "
    }
}
class y : PrinterClass {
    fn init {
      this.msg = "Y says: "
    }
}

mut p = PrinterClass()
p.`print`("csaka haha ")
p.`print`("fogorvos hihi ")
p.`print`("segithet huhu\n")
z = z()
z.`print`("csaka haha ")
z.`print`("fogorvos hihi ")
z.`print`("segithet huhu\n")
y = y()
y.`print`("csaka haha ")
y.`print`("fogorvos hihi ")
y.`print`("segithet huhu")

-- TEST for_loop_context_pin

for i=0 ; i < 10 ; i = i + 1 {
    try{
        i = i + 1;
        die "modifying loop variable did not throw up"
    } catch {
        none
    }
}

-- TEST stringIndexing1


mut string = "zabraa"
string[1] = "e"
string[0..-1]

-- TEST StringIndexing2


mut MESSAGE = "1234"
// you can replace part of the string in an assignment
// it can be longer than the part replaces, can be shorter, even empty
MESSAGE[1..3] = 775
MESSAGE

-- TEST StringIndexing3


mut X = {}
X.MESSAGE = "1234"
X.MESSAGE[1..3] = 32
X.MESSAGE[-âˆž..2] // bad luck

-- TEST reclosingClosure
mut MESSAGE = ""
mut z = 55;
mut y = 77;
mut x = {|| MESSAGE = MESSAGE + z + " "
        z = y;
    };
x(); // 55, z <- 77
{
  mut z = 63;
  x(); // 77
  MESSAGE = MESSAGE + z + " " // 77
  y = 99;
  reclose(x)(); // 63
  MESSAGE = MESSAGE + z + " " // 99
}
MESSAGE = MESSAGE + z + " ";
MESSAGE = MESSAGE[0â€¦-1]

-- TEST catchingException


mut MESSAGE = ""
try {
  mut h = nonexistent()
}catch exception {
  MESSAGE = exception.message
}
MESSAGE

-- TEST DeclareType



mut a : any|str = "alma ata"

-- TEST badType


mut ex;
try {
    mut a: str = 13
    }catch exception: ex = exception
"" + ex

-- TEST fnPositionalOnly

fn f(!a, !b, !c) { }
none

-- TEST fnPositionalAndOptional

fn f(a, b = 2, c = 3) { }
none

-- TEST fnNamedOnly

fn f(@a = 1, @b = 2) { }
none

-- TEST fnMixedParams

fn f(!a, b, c = 3, @d = 4) { }
none

-- TEST fnWithRestParam

fn f(a, [args]) { }
none

-- TEST fnWithMetaParam

fn f(a, {kwargs}) { }
none

-- TEST fnWithClosureParam

fn f(a, ^block) { }
none

-- TEST fnWithAllParamKinds

fn f(!a, b = 2, @x = 3, [rest], {meta}, ^closure) { }
none

-- TEST fnClosureOnly

fn f(^callback) { }
none

-- TEST ! fnRestBeforeMeta
fn f({meta}, [rest]) { }

-- TEST fnMetaBeforeClosure

fn f(@a = 1, {meta}, ^block) { }
none

-- TEST ! fnClosureNotLast
fn f(^block, a) { }

-- TEST ! fnDuplicateParamNames
fn f(a, a) { }

-- TEST ! fnDuplicateRestMetaClosure
fn f([x], [x]) { }

-- TEST closureWithNamedOnly

mut f = {| @x=1, @y=(2|3) | }
none

-- TEST closureWithAllParamKinds

mut f = {| !a, b = 2, @x = 3, [rest], {meta}, ^block| }
none

-- TEST ! closureRestAfterClosure
mut f = {| a, ^block, [rest] | }

-- TEST namedArguments1


fn fun(@a:str, @b=2){
  a + b
}
fun(a="1")

-- TEST namedArguments2


fn fun(@a:str, @b=2){
  a + b
}
fun(a="1",b=3)

-- TEST namedArguments3


fn fun(@a:str, {meta}){
  a + meta["b"]
}
fun(a="1",b=3)

-- TEST namedArguments4


fn fun(@a:str, [rest]){
  a + rest[0] + rest[1]
}
fun(a="1",3, 45)

-- TEST namedArguments5


fn fun(@a:str, [rest],{meta}){
  a + rest[0] + rest[1] + meta.b
}
fun(a="1",3, 45, b="ka")

-- TEST namedArguments6


fn fun(@a:str, [rest],{meta},^closurea){
  closurea(a , rest[0] , rest[1] , meta.b)
}
fun(a="1",3, 45, b="ka",{|a,b,c,d| ""+ d + c + b + a })

-- TEST closureArgument1


fn fun(@a:str, [rest],{meta},^closurea){
  closurea(a , rest[0] , rest[1] , meta.b)
}
fun(a="1",3, 45, b="ka"){|a,b,c,d| ""+ d + c + b + a }

-- TEST closureArgument2


fn fun(@a:bool, [rest],{meta},^closurea){
  if a :
    closurea(a , rest[0] , rest[1] , meta.b)
  else:
    ""+rest[0] + rest[1] + meta.b
}
mut x = fun(a=true,3, 45, b="ka"){|a,b,c,d| ""+ d + c + b }
mut klos = {|a,b,c,d| ""+ d + c + b }
mut y = fun(a=false,3, 45, b="ka", klos)
x + y
-- TEST positionalOnly1


fn fun(!a, b){
  "" + a + b
}
fun(1, 3)

-- TEST positionalOptional1


fn fun(a, b="default"){
  "" + a + b
}
fun(1)

-- TEST ! positionalDefaultSkipped
fn fun(!a, b=2, c=3){
  "" + a + b + c
}
fun(1, , 4) // skipping b isn't allowed

-- TEST mixedPositionalNamed
fn fun(!a, @b){
  "" + a + b
}
fun(1, b=3)

-- TEST namedWithDefaultSkipped
fn fun(@a, @b="default"){
  "" + a + b
}
fun(a="1")

-- TEST shadowingInMeta


fn fun(!a, {meta}){
  meta.a
}
fun("real", a="metaValue")

-- TEST restAndMetaOverlap


fn fun([rest], {meta}){
  "" + rest[0] + rest[1] + meta["b"]
}
fun(4,5,b="ka")

-- TEST ! invalidTypeInNamed
fn fun(@a:num){
  a + 1
}
fun(a="stringValue")

-- TEST ! closureAsNamedNotCallable
fn fun(@a:str, ^cb){
  cb()
}
fun(a="val", cb="notAFunction")

-- TEST ! multipleCallablesTrailing
fn fun(@a, ^cb){
  cb() // too few arguments
}
fun(a="hi") {|a| a }

-- TEST closureInlineWithMeta


fn fun(@a, {meta}, ^cb){
  cb(a, meta.x)
}
fun(a="META", x=3) {|a,b| "" + a + b }

-- TEST preprocessorSample


fn adhoc(){ // this will be deleted, it only exists in the preprocessor context
  "huhu "
}
# {|lexes|
["""
    fn adhoc(){ // this will be deleted, it only exists in the preprocessor context
        "huha "
        }
    mut M:str = ""
    fn adhic(){
      "hihi "
    }
    M = M + "hello ";
    M = M + (adhoc() or "none ");
""",..lexes]
}
M = M + adhic() + "hangyavadasz"

-- TEST jsonLazyObject


mut z = &{
a : k, b : (println("hubabba"))
}
mut M = ""
mut k = 1
M = M + z.a
k = 2
M = M + z.a

-- TEST defineEquals



class A {
  fn `==`(other){
    this.a == other.a
  }
}

mut x = A()
mut y = A()
mut z = {}

x.a = 1
x.b = "x"

y.a = 1
y.b = "y"

z.a = 1
z.b = "z"

""+ (x == y) + (y == z)

-- TEST pinObject

mut a = {x:1,y:2};
pin {a}
mut hu = { try {
    a.x = 3
    print("huhh")
}catch e {
    break 55
}};

hu

-- TEST typeExpression


mut a :("str") = "kuka"

-- TEST async

fn generator a=0, b=10 {
    for( i = a; i < b; i = i + 1 ) {
//        println("sleeping")
        sleep(0.1);
        yield i;
        }
    }
fn future {
  global mikka_makka
  "abraka dabra " + mikka_makka
}
mut a = 1
mut b = 3
mut k = [ .. {async {mut a = 7, b = 9 ;generator(a,b);}},keys()]
// println("The value of a is ", a);
//println(k)
global mikka_makka = "Maminti"
mut f = async {mut a=5;future()}
await f

-- TEST streaming


fn gen_1_to_10 {
    for i=1 ; i <= 10 ; i = i + 1:
        yield i;
    return 1000
}

mut st = async gen_1_to_10();
//println( st );
while st.has_next() :
    st.next();
await[10000] st

-- TEST fibonacci


    fn k(x){
        if x == 1 || x ==  0 : 1
        else: k(x-1)+k(x-2)
    }


k(10)
-- TEST localFibonacci


{
    fn k(x){
        if x == 1 || x ==  0 : 1
        else: me(x-1) + me(x-2)
    }
k(10)
}

-- TEST argumentSpreading


fn a(@a,@b,@c,@d){
    "%s %s %s %s " % [a,b,c,d]
}
fn b(!a,!b,!c,!d){
    "%s %s %s %s " % [a,b,c,d]
}

a(..{a:1,b:2,c:3,d:4}) + b(..[1,2,3,4])

-- TEST typeRdefinition
mut MSG = ""
class K {fn p(){global MSG; MSG += "original K" }}
fn h():K = K()
mut t:fn = {
   mut _K = K;
   {|| _K()}
}
class K {fn p(){global MSG; MSG += "overwritten K - " }}
h().p()
t().p()
die "bad typeRdefinition" if MSG != "overwritten K - original K"
none
/**
 * Checks if placing a queen at the given position is safe.
 * Verifies there are no conflicts with queens in previous rows by checking:
 * - Same column conflicts
 * - Diagonal conflicts (positive and negative diagonals)
 * 
 * @param board The current board state with queen positions
 * @param row The row to check
 * @param col The column to check
 * @return true if position is safe, false if there are conflicts
 */
fn is_safe(board, row, col){
    for i = 0; i < row; i = i+1 {
        if board[i] == col||board[i]-i == col-row||board[i]+i == col+row {
            return false;
        }
    }
    return true
}

/**
 * Solves the N-Queens problem using recursive backtracking.
 * Finds all valid arrangements of N queens on an NxN board where no queens threaten each other.
 * 
 * @param n Size of the board and number of queens
 * @param row Current row being processed (default 0)
 * @param board Current board state (default empty)
 * @param results Accumulated valid solutions (default empty)
 * @return List of all valid board configurations
 */
fn solve_nqueens(n, row = 0, board = [], results = []){
    if row == n {
        [..results, board]
        }else {
        mut local_results = results
        for col = 0; col < n; col = col+1 {
            if is_safe(board, row, col){
                mut next_board = [..board, col]
                local_results = solve_nqueens(n, row+1, next_board, local_results)
            }
        }
        local_results
    }
}

fn rotate_90(board){
    let n = len(board)
    let rotated = []
    for r = 0; r < n; r = r+1 {
        mut c = board[r]
        rotated[c] = n-1-r
    }
    rotated
}

let rotate_180 = rotate_90 ## rotate_90
let rotate_270 = rotate_180 ## rotate_90

fn mirror_horizontal(board){
    let n = len(board)
    mut mirrored = []
    for r = 0; r < n; r = r+1 {
        mirrored = [..mirrored, board[n-1-r]]
    }
    mirrored
}

fn mirror_vertical(board){
    let n = len(board)
    mut mirrored = []
    for r = 0; r < n; r = r+1 {
        mirrored = [..mirrored, n-1-board[r]]
    }
    mirrored
}

fn boards_equal(a, b){
    if len(a) != len(b): return false
    for i = 0; i < len(a); i = i+1 {
        if a[i] != b[i]: return false
    }
    return true
}

/**
 * Checks if two queen boards are the same under rotation/mirroring.
 * @param b1 First board
 * @param b2 Second board
 * @return true if equivalent under symmetry
 */
fn same_queen_solution(b1, b2){
    return (boards_equal(b1, b2)||
        boards_equal(rotate_90(b1), b2)||
        boards_equal(rotate_180(b1), b2)||
        boards_equal(rotate_270(b1), b2)||
        boards_equal(mirror_horizontal(b1), b2)||
        boards_equal(mirror_vertical(b1), b2)||
        boards_equal(rotate_90(mirror_horizontal(b1)), b2)||
    boards_equal(rotate_90(mirror_vertical(b1)), b2))
}

/**
 * Prints a visual representation of a board solution.
 * Uses Q to show queen positions and dots for empty squares.
 * 
 * @param board The board configuration to display
 */
fn print_board(board){
    for each row in board {
        mut line =  ""
        for col = 0; col < len(board); col = col+1 {
            line = line+(if col == row: "Q" else: ".")
        }
        println(line)
    }
    println()
}

mut solutions = solve_nqueens(8);
let finals = []
mut n = 0;
for j = 0; j < len(solutions); j = j+1:
    if((for i = j+1; i < len(solutions); i = i+1 {
            break false when same_queen_solution(solutions[i], solutions[j])
            true;
    })or true){
    finals[n] = solutions[j];
    n = n+1;
}

solutions = finals
die $"Wrong number of solutions ${len(solutions)} != 12" if len(solutions) != 12 
